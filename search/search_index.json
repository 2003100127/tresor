{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome_to_the_homepage_of_tresor","title":"Welcome to the homepage of Tresor.","text":"<p>This is where we show how you can use Tresor best.</p> <p>Tresor is designed to simulate either short-reads or long-reads under bulk RNA-seq and scRNA-seq conditions across six scenarios: specifically by varying sequencing errors, PCR errors, lengths of unique molecular identifiers (UMIs), sequencing depths, numbers of PCR cycles, and PCR amplification rates, respectively. </p> <p> It runs at a fast speed!</p> <p> A full set of funtionalities of a read simulation tool!</p> Tresor workflow"},{"location":"#features","title":"Features","text":"<p>The software outputs sequencing libraries that include comprehensive annotations, enabling the tracking of both the original and PCR-amplified molecules under complex conditions, such as sample multiplexing with Unique Molecular Identifiers (UMIs) and cell barcodes. These features are instrumental in quantifying changes in the number of PCR duplicates across different experiment settings. By providing these detailed annotations, Tensor supports both the evaluation of existing UMI deduplication tools and the spur of the development of novel methodologies.</p> <ul> <li> The first tool for simulating errors in flexibly designed sequencing protocols during bead synthesis</li> <li> Installation package<ul> <li> PyPI</li> <li> Conda</li> <li> Docker</li> <li> Github</li> </ul> </li> <li> Sequencing technology<ul> <li> Short reads (Illumina)</li> <li> Long reads (Oxford Nanopore Technologies)</li> </ul> </li> <li> Sequencing level<ul> <li> Single genomic locus</li> <li> Bulk RNA-seq</li> <li> single-cell (sc) RNA-seq</li> </ul> </li> </ul>"},{"location":"#programming","title":"Programming","text":"<p>Tresor is implemented with Python, which can be accessed through both Python and Shell commands. </p> <ul> <li><code>language</code> - Python</li> <li><code>module</code> - Object Oriented Programming (OOP) &amp; Aspect Oriented Programming (AOP)</li> <li><code>command</code> - Python and Shell</li> </ul> <p><pre><code>$ import tresor as ts\nts.locus\nts.gene\nts.sc\n</code></pre> Or <pre><code>$ tresor function_name -cfpn configuration.yml ...\n</code></pre></p>"},{"location":"about/","title":"About","text":"<p>We are a computational team at the University of Oxford to develop mathematical models and artificial intelligent tools to better interpret our genome.</p>"},{"location":"changelog/","title":"Changelog","text":"<ul> <li>0.1.0 (06.20.2024) -&gt; 1st release</li> <li>0.1.1 (05.21.2025) -&gt; fix bugs and anchor</li> <li>0.1.2 (05.25.2025) -&gt; estimate errors profiles during bead synthesis</li> </ul>"},{"location":"contact/","title":"Contact","text":"<ul> <li> Developer: Dr. Jianfeng Sun</li> <li> Affiliation: Nuffield Department of Orthopaedics, Rheumatology and Musculoskeletal Sciences (NDORMS), Headington, Oxford OX3 7LD, University of Oxford.</li> <li> Email: Jianfeng.sun@ndorms.ox.ac.uk; jianfeng.sunmt@gmail.com</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#system_requirement","title":"System Requirement","text":"<p>There is no requirement for Tresor. It is a cross-platform computational package.</p>"},{"location":"installation/#pypi_recommended","title":"PyPI (recommended)","text":"<p>Note</p> <p>Please make sure to use the latest version of tresor, as earlier versions may contain bugs. If you do not include the <code>--upgrade</code> flag during installation, you might encounter issues that prevent tresor from functioning properly in your analysis.</p> <p>tresor homepage</p> <pre><code># create a conda environment\nconda create --name tresor python=3.11\n\n# activate the conda environment\nconda activate tresor\n\n# the latest version\npip install tresor --upgrade\n</code></pre>"},{"location":"installation/#conda","title":"Conda","text":"<p>tresor homepage on Anaconda</p> <pre><code># create a conda environment\nconda create --name tresor python=3.11\n\n# activate the conda environment\nconda activate tresor\n\n# the latest version\nconda install jianfeng_sun::tresor\n</code></pre>"},{"location":"installation/#docker","title":"Docker","text":"<p>tresor homepage on Docker</p> <p>You can first choose which type of operating system (OS) you would like to install Docker software. Please refer to https://docs.docker.com/engine/install. For example, if your computational work is based on a Windows OS, you can choose to install a Desktop version of Docker. Please refer to https://docs.docker.com/desktop/install/windows-install.</p> <pre><code>docker pull 2003100127/tresor\n</code></pre>"},{"location":"installation/#github","title":"Github","text":"<p>tresor homepage on Github</p> <pre><code># create a conda environment\nconda create --name tresor python=3.11\n\n# activate the conda environment\nconda activate tresor\n\n# create a folder\nmkdir project\n\n# go to the folder\ncd project\n\n# fetch Tresor repository with the latest version\ngit clone https://github.com/2003100127/tresor.git\n\n# enter this repository\ncd tresor\n\n# do the following command\npip install .\n# or\npython setup.py install\n</code></pre>"},{"location":"tutorial/abundance/","title":"Abundance","text":"<p>The <code>ts.abun.est_from_fasta</code> and <code>ts.abun.est_from_gtf</code> modules estimate the relative abundance of each transcript in order to proportionally sample molecules from a Fasta/GTF file. The total number of molecules is controlled by <code>--molecule-count</code>. It makes \u201cone cell\u201d abundance (the true molecule count setting for this sample).</p> <ul> <li>Sampling methods<ul> <li> dirichlet</li> <li> lognormal</li> <li> zipf</li> <li> uniform</li> </ul> </li> <li>Selecting methods<ul> <li> random (uniform)</li> <li> first (first occurrence)</li> </ul> </li> </ul>"},{"location":"tutorial/abundance/#estimation_from_fasta","title":"Estimation from Fasta","text":"<p>Abundance can be estimated using a transcript fasta file through the following function.</p> <p>Download the fasta file.</p> <pre><code>wget -O gencode.v48.transcripts.fa.gz https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_48/gencode.v48.transcripts.fa.gz\n</code></pre> <p>If you want to generate 50 transcripts from the file and the total expression value is 10000, do</p> <pre><code>import tresor as ts\n\nres = ts.abun.est_from_fasta(\n    fasta_fpn=\"D:/Document/Programming/Python/umiche/umiche/data/r1/cm/gencode.v48.transcripts.fa.gz\",\n    num_selected_mols=50,\n    select_mode=\"random\",\n    num_total_mols=10000,\n    use_pipe_if_present=True,\n    pipe_index=0,\n    strip_version=True,\n    dist=\"dirichlet\",\n    alpha=1.0,\n    min_count=0,\n    sort_output_by=\"count\",\n    output_tsv=\"D:/Document/Programming/Python/umiche/umiche/data/r1/cm/tksm/abundance.tsv\",\n    subset_ids_txt=\"D:/Document/Programming/Python/umiche/umiche/data/r1/cm/tksm/refs.sub.ids.fa.txt\",\n    seed=1,\n)\nprint(\"Top5:\")\nfor i in range(min(5, len(res['ids']))):\n    print(res['ids'][i], res['counts'][i])\n</code></pre> <p>The format of <code>abundance.tsv</code> file: tab-delimited, must contain at least Transcript ID and Abundance as two columns.</p> <p><code>abundance.tsv</code> looks like</p> <pre><code>transcript  count\nENST00000769524 935\nENST00000816532 780\nENST00000820931 767\n...\nENST00000754605 6\nENST00000672107 4\n</code></pre>"},{"location":"tutorial/abundance/#estimation_from_gtf","title":"Estimation from GTF","text":"<p>Download a GTF file from Genecode.</p> <pre><code>wget -O gencode.v48.annotation.gtf.gz https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_48/gencode.v48.annotation.gtf.gz\n\n# wget -O gencode.v48.basic.annotation.gtf.gz https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_48/gencode.v48.basic.annotation.gtf.gz\n</code></pre> <pre><code>import tresor as ts\n\nres = ts.abun.est_from_gtf(\n    gtf_fpn=\"D:/Document/Programming/Python/umiche/umiche/data/r1/cm/tksm/gencode.v48.annotation.gtf\",\n    num_selected_mols=5,\n    select_mode=\"random\",\n    num_total_mols=10,\n    strip_version=True,\n    dist=\"dirichlet\",\n    alpha=1.0,\n    min_count=0,\n    sort_output_by=\"count\",\n    include_noncoding=False,\n    output_tsv=\"D:/Document/Programming/Python/umiche/umiche/data/r1/cm/tksm/abundance.pure.tsv\",\n    versioned_out=\"D:/Document/Programming/Python/umiche/umiche/data/r1/cm/tksm/abundance.versioned.tsv\",\n    subset_ids_txt=\"D:/Document/Programming/Python/umiche/umiche/data/r1/cm/tksm/refs.sub.ids.gtf.txt\",\n    seed=1,\n)\nprint(\"Top5:\")\nfor i in range(min(5, len(res['ids']))):\n    print(res['ids'][i], res['counts'][i])\n</code></pre> <p><code>abundance.pure.tsv</code> looks like</p> <pre><code>ENST00000477535 4\nENST00000304081 3\nENST00000509522 2\nENST00000593404 1\nENST00000610462 0\n</code></pre> <p><code>abundance.versioned.tsv</code> looks like</p> <pre><code>ENST00000593404.5   878\nENST00000620405.1   732\nENST00000530097.1   720\n...\nENST00000542002.5   317\nENST00000519650.5   286\n</code></pre>"},{"location":"tutorial/abundance/#tpm","title":"TPM","text":"<p>Simple TPM normalization</p> \\[ TPM_i = \\frac{count_i}{\\sum count} \\times 10^6 \\] <p>Explanation</p> <ul> <li>\\(TPM_i\\): TPM value of the i-th transcript</li> <li>\\(count_i\\): Read count of the i-th transcript</li> <li>\\(\u03a3(count)\\): Sum of counts across all transcripts</li> <li>\\(1e6\\): Scaling factor (per million)</li> </ul> <p>You can add a cell barcode (e.g., ATGCATGCATGCATGC) to the sampled transcripts in <code>cell_barcode</code> to denote from which cells they are derived.</p> <pre><code>import tresor as ts\n\nres = ts.abun.to_tpm(\n    counts_tsv=\"D:/Document/Programming/Python/umiche/umiche/data/r1/cm/tksm/abundance.versioned.tsv\",\n    out_tsv=\"D:/Document/Programming/Python/umiche/umiche/data/r1/cm/tksm/abundance.versioned.tpm.tsv\",\n    cell_barcode=\"ATGCATGCATGCATGC\",\n    include_header=False,\n    float_format=\"{:.6f}\"\n)\n</code></pre> <p><code>abundance.versioned.tpm.tsv</code> looks like</p> <pre><code>ENST00000477535.5   400000.000000   ATGCATGCATGCATGC\nENST00000304081.9   300000.000000   ATGCATGCATGCATGC\nENST00000509522.6   200000.000000   ATGCATGCATGCATGC\nENST00000593404.5   100000.000000   ATGCATGCATGCATGC\nENST00000610462.1   0.000000    ATGCATGCATGCATGC\n</code></pre>"},{"location":"tutorial/1.%20Sequencing%20library/1.1%20Overview/","title":"1.1 Overview","text":"<p>We developed a wide array of functionalities for library preparation and generation to better meet the needs of data simulation across different sequencing technologies and experimental conditions. To facilitate the simulation of both long and short reads, we provided two distinct modules: one for extracting sequences from a reference genome and another for randomly synthesising sequences. The reference genome, which can be from any species, must be organized in the Fasta format. On the other hand, randomly synthesizing sequences involves sampling nucleotides from a uniform distribution.</p> <ul> <li><code>tresor.locus</code> - a module that can simulate sequencing libraries at a given genome locus.</li> <li><code>tresor.gene</code> - a module that can simulate sequencing libraries at the bulk RNA sequencing level.</li> <li><code>tresor.sc</code> - a module that can simulate sequencing libraries at the single-cell RNA sequencing level.</li> </ul>"},{"location":"tutorial/1.%20Sequencing%20library/1.2%20Single-locus/","title":"1.2 Single locus","text":"<p><code>tresor.locus.library</code> is the module that can simulate sequencing libraries at a given single locus. A single genomic locus represents where a genome segment is fragmented into pieces for sequencing, irrespective of information on specific genes and cells. Therefore, this can be treated as a baseline to validate users' hypotheses and evaluate tool performance.</p>"},{"location":"tutorial/1.%20Sequencing%20library/1.2%20Single-locus/#usage","title":"Usage","text":"PythonShell <pre><code>import tresor as ts\n\nts.locus.library(\n    seq_num=50,\n    len_params={\n        'umi': {\n            'umi_unit_pattern': 2,\n            'umi_unit_len': 12,\n        },\n    },\n    seq_params={\n        'custom': 'AAGC',  # BAGC\n        'custom_1': 'V',\n    },\n    material_params={\n        'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n    },\n    is_seed=True,\n\n    working_dir=to('data/simu/docs/'),\n\n    condis=['umi', 'custom', 'seq', 'custom_1'],\n    sim_thres=3,\n    permutation=0,\n\n    mode='short_read',  # long_read short_read\n\n    verbose=True,  # False True\n)\n</code></pre> <pre><code>tresor library_sl \\\n-cfpn ./tresor/data/libslocus.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/1.%20Sequencing%20library/1.2%20Single-locus/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results <p>```</p>"},{"location":"tutorial/1.%20Sequencing%20library/1.2%20Single-locus/#extension","title":"Extension","text":"<p>Tip</p> <p>We can flexibly design the structure of a read by adding different components to <code>condis</code> separated by comma. For example, there is an initial read containing only a UMI. <pre><code>condis=['umi'],\n</code></pre></p> <p>Next, we can add a <code>seq</code> next to it. <pre><code>condis=['umi', 'seq'],\n</code></pre></p> <p>If we have a read containing many bespoke parts, <code>primer</code>, <code>primer_1</code>, <code>spacer</code>, <code>spacer_1</code>, <code>adapter</code>, <code>adapter_1</code>,<code>umi</code>, <code>umi_1</code>, 'seq', and 'seq_2', we can set <code>condis</code> just as <pre><code>condis=['umi', 'primer', 'primer_1', 'spacer', 'spacer_1', 'adapter', 'adapter_1', 'seq', 'seq_2', 'umi_1'],\n</code></pre></p> <p>Then, we can add the corresponding lengths of the parts/components in <code>len_params</code> as follows. <pre><code>len_params={\n    'umi': {\n        'umi_unit_pattern': 3,\n        'umi_unit_len': 12,\n    },\n    'umi_1': {\n        'umi_unit_pattern': 3,\n        'umi_unit_len': 12,\n    },\n    'seq': 100,\n    'seq_2': 100,\n    'adapter': 10,\n    'adapter_1': 10,\n    'primer': 10,\n    'primer_1': 10,\n    'spacer': 10,\n    'spacer_1': 10,\n},\n</code></pre></p> <p>If you have known sequences of some components in read 1, you can use <code>seq_params</code> to specify customed sequences. The following settings were used in our recently released biotechnology, anchor-enhanced technology, for elevating the discovery of long-reads. We placed an anchor sequence <code>BAGC</code> and a <code>V</code> base in between the read 1 sequence where B means any type of a base. Tresor was used for simulating reads with the two custom sequences placed as follows. <pre><code>seq_params={\n    'custom': 'AAGC',  # BAGC\n    'custom_1': 'V',\n},\n</code></pre></p>"},{"location":"tutorial/1.%20Sequencing%20library/1.2%20Single-locus/#output","title":"Output","text":""},{"location":"tutorial/1.%20Sequencing%20library/1.2%20Single-locus/#console","title":"Console","text":"<pre><code>D:\\Programming\\anaconda3\\envs\\umi\\python.exe D:\\Document\\Programming\\Python\\tresor\\tresor\\locus.py \n17/07/2024 14:04:15 logger: Initialisation and parameters: \n{'seq_params': {'custom': 'AAGC', 'custom_1': 'V'}, 'material_params': {'fasta_cdna_fpn': 'D:\\\\Document\\\\Programming\\\\Python\\\\tresor\\\\tresor\\\\data/Homo_sapiens.GRCh38.cdna.all.fa.gz'}, 'mode': 'short_read', 'bead_mutation': True, 'bead_mut_rate': 0.0001, 'bead_deletion': True, 'bead_del_rate': 0.016, 'bead_insertion': True, 'bead_ins_rate': 7.1e-07}\n17/07/2024 14:04:15 logger: ======&gt;Sequencing library preparation starts\n17/07/2024 14:04:15 logger: ======&gt;Condition map: {'umi': ['alone'], 'custom': ['alone', '1'], 'seq': ['alone']}\n17/07/2024 14:04:15 logger: ======&gt;Read CDNAs from a reference ome\n17/07/2024 14:04:21 logger: ======&gt;There are 204083 genes in the reference genome\n17/07/2024 14:04:21 logger: ======&gt;Read 1 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGAAATTTAAACCCTTTAAAGGGAAAAAAGGGCCC', 'seq': 'GGTATGAAGACACAGGGAGACGTCGGGCCACAAGGGAACCCACTGAGGTGGGGACCAAAGATGGTGGCTCTTTGAATTGGAGCCAAGCGTGGTGGGCACC', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 2 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGTTTAAACCCCCCCCCGGGAAATTTTTTGGGTTT', 'seq': 'CCTCCCCAGGATCTCGGACCAGCCCTCAGGAGCTGTCAGAGGAACTAAGCAGAAGGCTTCAGATCACTCCAGACTCCAATGGGGAACAGTTCAGCTCTTT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 3 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAATTTGGGCCCGGGAAAGGGCCCAAAAAAGGGAAA', 'seq': 'AAGTCATATGGGGATAGCAGGAGCAAGAGAGAGAGGAGGTGGCAGGCTCTAAACAACCAGCTCTGGCATGAACTAACAGTGAGAACTCATTATTTACCAT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 4 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCAAAAAAGGGGGGCCCCCCCCCGGGAAAGGGAAA', 'seq': 'CAGCGACTCTGCCAGCTCAAGGGACCCACCTGCCAGTACAGGGCAGCCCAATCTGGTCCCTCTGAACGGCCAGGACCTCCGCAGAGGGCCCTGCTGGCAC', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 5 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'TTTCCCGGGCCCGGGAAAGGGAAAGGGTTTGGGGGG', 'seq': 'CCCTTTGGGTTTAGCACGATGAGCTCAATCGGCACTGGGTATGACCTGTCAGCCTCTACATTCTCTCCTGACGGAAGAGTTTTTCAAGTTGAATATGCTA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 6 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAACCCGGGTTTCCCCCCGGGCCCCCCGGGCCCAAA', 'seq': 'GAAAATCAAGATGAAATAGAAAATATGATGAATGCAATATTTAAAGGAGTGTTTGTACATAGATACCGTGATGCGATAGCTGAAATTCGAGCTATTTGCA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 7 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAACCCAAAAAACCCTTTCCCAAACCCGGGGGGTTT', 'seq': 'CACTTCCAAATTTGAGATGTAGGCATTTCTGCCTCAACTTGCTAGCTGCGATTTTAAAAGCTTATGTTCCTGAGGAAGAATTGAAGGCAGCAGAAATAGA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 8 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCAAACCCAAAGGGCCCAAAGGGGGGAAACCCCCC', 'seq': 'CAAGAGGGACCCCAGAAACTGATCCGCAAAGTGTCTACCTCGGGGCAGATCCGGACCAAGACCAGTATTAAAGAGGGACAGCTATTGAAGCAAACCAGTT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 9 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'TTTCCCAAAGGGAAAGGGTTTGGGAAACCCTTTAAA', 'seq': 'ATCTATCCAGGGAGGGGGAGGCCCATGAACGTAGGTTCTCTGCAGGGCCCAAGGTCAACGGAACATTCCAGGCTGACTTTCCTCTGGGCCCTGCCACCCA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 10 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCTTTCCCCCCTTTTTTTTTCCCTTTTTTTTTGGG', 'seq': 'TCCCCTTCAGGGACGTGAGCATCTAGCTGCACTGATTTGTTGTTCAGGAACAGGAAATGAAACCCCGCAGCTTTGAACACAATAACCCACGCCAGCCTCA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 11 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGCCCAAACCCGGGAAATTTCCCAAACCCGGGCCC', 'seq': 'GGGAAGATTGGGGCCTTCTGATTATTTTGGTGAAATTGCACTACTGATGAATCGTCCTCGTGCTGCCACAGTTGTTGCTCGTGGCCCCTTGAAGTGCGTT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 12 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGTTTGGGCCCTTTGGGGGGAAATTTTTTGGGCCC', 'seq': 'GGCCAGGCGCCTTCTGGACACCGTCTGGAATAAGGGTACTTGGGCCTGTCAGAAGCTCATCGCGGCTGCCCAAGAAGCCCAGGCCGACAGCCAGTCCCCC', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 13 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAAGGGCCCTTTTTTCCCTTTAAACCCCCCCCCAAA', 'seq': 'GGTGAACAGGCGACCATGCTTTTCAGCTCTGGAAGTCGATGAAACATACGTTCCCAAAGAGTTTAATGCTGAAACATTCACCTTCCATGCAGATATATGC', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 14 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCAAATTTTTTAAAGGGTTTGGGCCCGGGGGGGGG', 'seq': 'CACATTGTCATATGCTAGTGATCTCTATAATGGTTCCAGTATAGTCTCTAGTATTGAATTTGACCGGGATTGTGACTATTTTGCGATTGCTGGAGTTACA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': False}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 15 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGCCCAAAGGGGGGGGGGGGTTTGGGGGGTTTCCC', 'seq': 'ACTCCAGCCTGGGTGACAAAGTGAGACTCCGTCACAACAACAACAACAAAAAGCTTCCCCAACTAAAGCCTAGAAGAGCTTCTGAGGCGCTGCTTTGTCA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 16 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCAAATTTTTTTTTAAAGGGGGGCCCCCCCCCGGG', 'seq': 'AGACCCCTTGACATCAAGCTCTCTGGGAAGTGGAGCACTGATGATATGCAGATCAATGGCATTTCCCTGCAGGATTACACTGCAGTGAAGGAGAAGTATG', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 17 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGGGGTTTGGGAAAAAAGGGTTTCCCGGGGGGCCC', 'seq': 'CATTAAAAAGGGTCTTGCTGCAAAGAGAAAAAGGATTGAAAGCGTTGCAAAAGCTTGCAACGAAACAAACAACAAAATTAAACGTATTTTGAGAACAATA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 18 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'TTTCCCGGGAAAAAATTTTTTCCCAAAGGGCCCCCC', 'seq': 'GAAGCCCGCCGCCTCCCCGCGGCCCCGGCGAGCAGCCGCCGCCCGCCGCACCCATGAGCATGTCAGTGAAAAAACCAGTGAATCGCCTTCCAAACCAGGA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 19 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAATTTGGGCCCCCCAAACCCCCCTTTGGGGGGAAA', 'seq': 'AGACTAGGCGATCCTCACTTCTACCAGGACTCTTTGTGGCTGCGCAAGGAGTTCATGCAAGTTCGAAGGTGACCTCTTGTCACACTGATGGATACTTTTC', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 20 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGGGGCCCAAAAAAAAACCCGGGGGGGGGAAAGGG', 'seq': 'TGGAGGCCGCGGACATTTTGGTGCCAAGCCGAACCGAGCCGGGGCGCCGGGAGCTATTGGGACCTGCGGCCTGGCTACAGATAAGGGACCAAAATGACTG', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 21 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'TTTTTTTTTGGGCCCGGGAAAAAACCCAAAGGGGGG', 'seq': 'TCTCCTCGTCGTCCTCCGGAGCCGAGACGTCCGCATCCGGCGGCAGCGGAAGCCCAGGAGCCTGCCCTGCCCTGGGGACGAAGAGCTGCAGCTCCTCCTG', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 22 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAATTTGGGGGGAAACCCTTTTTTCCCGGGCCCCCC', 'seq': 'CCAATGGTCTATCAGGAAGTAGAAGAGCAGATCCAAACGATCAAAGATGTTGCTGGAGATAAATAGGCAGAAGGAAGAAGAGGACCTCAAATTACAATTG', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 23 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAATTTTTTAAACCCAAAAAAAAAAAATTTTTTCCC', 'seq': 'TTCAGCAGTTGCCTCAATTAAGGCCTTGGAACCAGGGAGTGAAAAAAATAGATCCTGATTTATATGAAAAGTTTATCAGTCACAGATTTGGAGAAGAAAT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': False}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 24 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCCCCGGGGGGAAAAAATTTCCCTTTGGGAAACCC', 'seq': 'CTGGCATCGGCTAGTGGGTCAGTGTGGATGGCGGGGGCGGGGTATGAGCTAGTCCTCTGTCTCCCACCAGATGTGCTGTGATCACCGAGTTTGCTCGCAT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 25 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGTTTTTTCCCTTTCCCAAAGGGCCCGGGCCCGGG', 'seq': 'CTCTCCCCGGCCCCACTCGCCAGGTCCTACCACGATGCCTGACTCGTTTGCGGCTTTGGGACCGGTTGTAGGTGGCTTGACCGTCACTAGTAGACGTTTC', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 26 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAAGGGAAATTTAAAAAAGGGGGGCCCGGGAAAGGG', 'seq': 'ACTCAAACACTCCCAGAGGACGGCACTCTGCATGGGACGCCATCCAGCTCCTTTGACTGTGGAATCAAGTACATTATCAGCTGGCCCCTGGCTCCTGGCT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 27 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCGGGTTTGGGTTTAAACCCTTTTTTTTTAAACCC', 'seq': 'ACAAGTATAATTTTGATACAATGATATATGTGACAGATAAAGGACAAAAAAAGCATTTTCAGCAAGTATTCCAAATGCTGAAGATCATGGGATATGACTG', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 28 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGGGGCCCGGGAAACCCGGGGGGCCCAAATTTTTT', 'seq': 'GCTGGAGTGCAGTGGAGCAATCTCGGCTCATTGAACCTCTTGGGTTCAAGTGATTCTTGTGCCTCAGCCTCCCAAGTAGCTGGAATTACAGGCACATACC', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 29 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCAAATTTAAACCCCCCCCCGGGGGGTTTTTTGGG', 'seq': 'CAAGATCCTGCCCGGCCTGTACATCGGCAACTTCAAAGATGCCAGAGACGCGGAACAATTGAGCAAGAACAAGGACAAGACATTTCAAAGAAAGTATTAA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 30 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'TTTCCCCCCAAACCCTTTGGGGGGGGGAAAGGGTTT', 'seq': 'ACAGCCGGGCGCCCGTCGGGCTCTGGGAGAGAGCGAGAGAGAAATCCGGTTAAAATCAGAGTCGGAGGGAGGTTTAACCACAGATCGGTTCCGATCGGAT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 31 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'TTTCCCCCCGGGCCCTTTAAATTTGGGGGGTTTGGG', 'seq': 'TTGCCCTCTGACTTGCAGATGCTGTGAGATCCAGAGCTAAGACTCCACGACATCCCGGAAGCCGAAAAATGAATCAGTCTCAGTGTTTCCTGTTTGGATT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 32 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGAAAAAAGGGGGGCCCTTTTTTAAAAAACCCCCC', 'seq': 'GCAGGGAACTGAGGCCGCCTGCCCACATCCATGTGAGTGACCGTCTGGAAGCAGACCTCCAGCCCCAGTCCCGCCTCTGGAGGACTGCAGCCTGCACCTG', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 33 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'TTTGGGCCCGGGTTTTTTAAATTTGGGGGGCCCGGG', 'seq': 'GTTATTATTTTAAAAATTAGCTAACTTCTCTCACGGTGTCCTCCCAATATGCACCTTTTGCTCCTAGTGTCCAGATACCTAGCTTTGTATCATTATTTTT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 34 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGTTTAAATTTTTTTTTTTTGGGTTTCCCGGGCCC', 'seq': 'GCTGCCTGCTGATCCGCGCCTAGAGTTTGACCAGCCACTCTCCAGCTCGGCTTTCGCGGCGCCGAGATGCTGTCCTGCCGCCTCCAGTGCGCGCTGGCTG', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 35 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGCCCAAATTTAAAGGGCCCAAACCCCCCAAATTT', 'seq': 'CGCGCCCGGCCAAATAAAATAAAATGTTAAAGCAAATTCAGGACTACCCCTCCTCCAAGTCTTCTGTTCCCTTTGGGCGCCCAGGTGAGCGGGGGAGGGG', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 36 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAAGGGAAACCCAAAAAATTTAAACCCAAATTTGGG', 'seq': 'TTTGGCTGTCCGGACGGTGCAGCGGCGAGGCCGGCCGCGAAGATGCCAGTGGCGGTGATGGCGGAAAGCGCCTTTAGTTTCAAAAAGTTGCTGGATCAGT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 37 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCTTTCCCTTTGGGTTTGGGTTTCCCGGGAAACCC', 'seq': 'CTGTGCAGCTGCTGCTCGTGGCAGCCTGGAGCATGGGCTGTGGTGAGGCCCTCAAGTGCTACACCTGCAAGGAGCCCATGACCAGTGCTTCCTGCAGGAC', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 38 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGTTTAAAGGGAAAGGGTTTGGGAAAGGGAAATTT', 'seq': 'CGGCCCTGACCGCCCCGTGTCCGGCCAGGATCAACTCGTAGGCTTTACGAGAAGAAGATCTTCGAGTACGAGACCCAGAGGCGGCGGCTCTCGCCCCCCA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 39 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'TTTGGGGGGAAAGGGAAAAAACCCGGGGGGGGGCCC', 'seq': 'GGCCCCCTGCCTTGAGGAGCAGCCTTTTTGCTTTCTTTCTTTGGGATAGGATGCCTCTGGGGTTCTTTCTCCCGCAGCCGGCTGTGTTTTAGAGCACTTT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 40 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAAGGGTTTAAACCCAAAGGGTTTGGGGGGAAAAAA', 'seq': 'ACTTAGAACAGCTGGCATCTAACAAAGACTAGCTGTGTCAGCGTGTTATGATGCCGTCCCGTACCAACCTGGCTACTGGAATCCCCAGTAGTAAAGTGAA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': False}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 41 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGTTTCCCCCCGGGGGGCCCTTTAAAAAAAAATTT', 'seq': 'TCCCTTCTGGGTGTTATGGAAGAGTGGCTCCACGGTCAGGCTTGGCTGCAAAACACTTTATTGATGTAGGAGGGCTTTTGTTTGGGGTAGAGTATTAATA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 42 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGCCCGGGGGGAAACCCAAATTTGGGTTTGGGAAA', 'seq': 'TGCAGTTCTGTGAGAGGAAACAACAGCTAACCGGAGCCAGAATTTATACATATTTGCTAGAGAAATCCAGACTTGTTTCACAACCTCTTGGCCAGAGCAA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 43 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAAAAACCCGGGTTTAAAAAAAAAGGGGGGAAAAAA', 'seq': 'CCCCTCTCCCAGGAGACTGGTCTCTGTGCTGACTTCCACCCGAGTGGGGCAGTTGTGGCCGTAGGACTGAACACGGGGAGGTGGTTGGTTTTGGACACAG', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 44 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGAAATTTGGGAAATTTAAACCCAAACCCCCCCCC', 'seq': 'CATGCGACCCCCTTTCACCTACGCCACGCTCATCCGCTGGGCCATCCTGGAGGCTCCAGAGAAGCAGCGGACACTCAATGAGATCTACCACTGGTTCACA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 45 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCGGGGGGAAAAAACCCTTTCCCGGGCCCTTTAAA', 'seq': 'TCCGCCCTGGCACTTCAGAAACGCTGAAACGTTTCATGGCAGAGCAGCTGAACCAGGAGCAGCAGCAGATTCCTGGAAAACCAGGCACTTTCACTTGGCA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 46 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'GGGCCCAAACCCTTTTTTCCCGGGAAACCCCCCGGG', 'seq': 'CTCAAGTGCCTCATCGTGGCCCTGCCCAAGATCATCCTGGCTGTCAAGTCCAAGGGAAAGTTCTATCTGGTCATCGAGGAGCTGAGCCAGCTGTTCCGAT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 47 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'AAAAAATTTGGGCCCAAAAAACCCAAACCCGGGAAA', 'seq': 'TGCAAGAATGCCGATGGAGTGGAGTTGTACAATGAGATTGAGTTCTATGCCAAAGTGAACTCCAAGGACTCCCAGGATAAGCGCTCTTCCCGCTCTATTA', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 48 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCGGGCCCTTTTTTAAAGGGCCCAAACCCAAAAAA', 'seq': 'TTTTAGTCTGTGAACTATAATATTCATGAGACGCTTAACACTTCCCAAAGTGGCAGGGAGGAAACTCTTTGTTTCTTCTGATTCCACCGGAAGAGAGAGT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 49 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'CCCAAAAAAGGGCCCAAAGGGCCCTTTGGGGGGCCC', 'seq': 'GGTTACTGTGGGCAGCTTGAAGACCTCAGCGGTGCCCAGTACCTCCACGATGTCCCAAGAGCCTGAGCTCCTCATCAGTGGAATGGAAAAGCCCCTCCCT', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n17/07/2024 14:04:21 logger: ======&gt;Read 50 generation\n17/07/2024 14:04:21 logger: =========&gt;UMI generation start\n17/07/2024 14:04:21 logger: ============&gt;UMI condition 0: umi\n17/07/2024 14:04:21 logger: =========&gt;Sequence generation start\n17/07/2024 14:04:21 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 14:04:21 logger: ============&gt;Custom-designed condition 1: custom_1\n{'umi': 'TTTTTTAAATTTAAAAAAGGGAAAGGGGGGGGGCCC', 'seq': 'ACATTGGCAGCTGTGCCCGGAGAGGCCTCCAGGGTCCAGCAGAGAAAGGAGTCGAAGAAGCCACCAGCCAAGCTGCAGCCCCGAGCTCTAGCAGGCTGGC', 'custom': 'AAGC', 'custom_1': 'V'}\n{'read_mut': {'mark': False}, 'read_del': {'mark': True}, 'read_ins': {'mark': False}}\n0\n0\n0\n17/07/2024 14:04:21 logger: ===&gt;Time for sequencing library preparation: 6.757s\n\nProcess finished with exit code 0\n</code></pre>"},{"location":"tutorial/1.%20Sequencing%20library/1.2%20Single-locus/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated sequencing library are shown in the following picture.</p> Fig 1. Generated files of a sequencing library <p>In this case, we used homotrimer blocks to simulate UMIs where the length of each UMI is set to be 36 containing 12 trimer blocks.</p> Fig 2. Simulated UMIs <p>The sequences are randomly chosen from the input human cDNAs and truncated according to the length of each short read. </p> Fig 3. Simulated genomics sequences <p>The sequencing library is tabulated to a dataframe. Each row shows the necessary information about the read 1</p> <ol> <li>Sequence</li> <li>Identifier</li> <li>Source</li> </ol> <p>Init means a read 1 is a sequence from the sequencing library, to differ from those from PCR amplification.</p> Fig 4. Simulated sequencing library <p>We set a big integer as an initial seed to sequentially simulate each UMI sequence. Then, users can use the saved seeds to reproduce the experiment.</p> Fig 5. Seeds for simulating UMIs  <p>The chosen gene symbols are recorded, each corresponding to the source of the truncated sequence by order.</p> Fig 6. Seeds for simulating cDNAs"},{"location":"tutorial/1.%20Sequencing%20library/1.3%20Bulk%20RNA-seq/","title":"1.3 Bulk RNA seq","text":"<p><code>tresor.gene.library</code> is the module that can simulate sequencing libraries at the bulk RNA-seq level. This is used to simulate reads that are tagged by genes, respectively.</p>"},{"location":"tutorial/1.%20Sequencing%20library/1.3%20Bulk%20RNA-seq/#usage","title":"Usage","text":"PythonShell <pre><code>ts.gene.library(\n    r_root='D:/Programming/R/R-4.3.2/',\n    num_genes=6,\n    num_samples=2,\n    simulator='spsimseq',\n\n    seq_num=50,\n    len_params={\n        'umi': {\n            'umi_unit_pattern': 3,\n            'umi_unit_len': 12,\n        },\n        'seq': 100,\n    },\n    seq_params={\n        'custom': 'BAGC',\n        'custom_1': 'V',\n    },\n    material_params={\n        'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n    },\n    is_seed=True,\n\n    working_dir=to('data/simu/docs/'),\n\n    condis=['umi', 'custom', 'seq', 'custom_1'],\n\n    sim_thres=3,\n    permutation=0,\n\n    mode='short_read',  # long_read short_read\n\n    verbose=False,\n)\n</code></pre> <pre><code>tresor library_bulk \\\n-cfpn ./tresor/data/libgene.yml \\\n-snum 50 \\\n-rfpn D:/Programming/R/R-4.3.2/ \\\n-nspl 2 \\\n-ngene 20 \\\n-gsimulator spsimseq \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre> <p>Code highlighted is executed as equivalent to do coding in the following way. We employed the SPsimSeq tool<sup>1</sup> to simulate bulk RNA-seq data. In this case, we simulated a sample-by-gene count matrix containing 6 genes and 2 samples.</p> <pre><code>import tresor as ts\n\ngspl = ts.gmat.spsimseq_bulk(\n    R_root='D:/Programming/R/R-4.3.2/',\n    num_genes=6,\n    num_samples=2,\n)\n\nprint(gspl)\n</code></pre> <p>The count matrix is formed below. <pre><code>17/07/2024 22:49:05 logger: =========&gt;spsimseq is being used\nSPsimSeq package version 1.12.0 \nR[write to console]: Estimating featurewise correlations ...\n\nR[write to console]: Selecting candidate DE genes ...\n\nR[write to console]: Estimating densities ...\n\nR[write to console]: Configuring design ...\n\nR[write to console]: Simulating data ...\n\nR[write to console]:  ...1 of 1\n\n17/07/2024 22:49:13 logger: =========&gt;spsimseq completes simulation\n          Gene_1  Gene_2  Gene_3  Gene_4  Gene_5  Gene_6\nSample_1     0.0     0.0     0.0    95.0   322.0   423.0\nSample_2     2.0     2.0     1.0   273.0   671.0   467.0\n17/07/2024 22:49:13 logger: =========&gt;spsimseq is being used\nSPsimSeq package version 1.12.0\n</code></pre></p> <p>Then, we use this count matrix as input to Tresor's corresponding module <code>ts.gene.library</code>.</p>"},{"location":"tutorial/1.%20Sequencing%20library/1.3%20Bulk%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>num_genes</code> number of genes <code>num_samples</code> number of samples <code>r_root</code> path to the R executable <code>simulator</code> computational tool to generate a sample-by-gene count matrix <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>rfpn</code> path to the R executable <code>nspl</code> number of samples <code>ngene</code> number of genes <code>gsimulator</code> computational tool to generate a sample-by-gene count matrix <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results <p>```</p>"},{"location":"tutorial/1.%20Sequencing%20library/1.3%20Bulk%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/1.%20Sequencing%20library/1.3%20Bulk%20RNA-seq/#console","title":"Console","text":"<pre><code>{'seq_num': 50, 'seq_params': {'custom': 'BAGC', 'custom_1': 'V'}, 'material_params': {'fasta_cdna_fpn': 'D:\\\\Document\\\\Programming\\\\Python\\\\tresor\\\\tresor\\\\data/Homo_sapiens.GRCh38.cdna.all.fa.gz'}, 'mode': 'short_read'}\nFinished\n</code></pre>"},{"location":"tutorial/1.%20Sequencing%20library/1.3%20Bulk%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated sequencing library are shown in the following picture.</p> Fig 1. Generated files of a sequencing library <p>Annotation</p> <p>For speeding up computation, we simulated the library for sample 0, which has genes 3, 4, and 5.</p> <ul> <li>seq_s_0_g_3.txt - sequences for sample 0 and gene 3</li> <li>umi_s_0_g_3.txt - UMIs for sample 0 and gene 3</li> <li>cdna_ids_alone_s_0_g_3.txt - cDNA IDs for sample 0 and gene 3</li> </ul> <p>In this case, we used homotrimer blocks to simulate UMIs where the length of each UMI is set to be 36 containing 12 trimer blocks.</p> Fig 2. Simulated UMIs <p>The sequences are randomly chosen from the input human cDNAs and truncated according to the length of each short read. </p> Fig 3. Simulated genomics sequences <p>The sequencing library is tabulated to a dataframe. Each row shows the necessary information about the read 1</p> <ol> <li>Sequence</li> <li>Identifier</li> <li>Source</li> </ol> <p>Attention</p> <p>The identifier is composed of ID of the molecule, character <code>s</code> for sample, ID of the sample, character <code>g</code> for gene, and ID of the gene, demarked by *.</p> <p>Init means a read 1 is a sequence from the sequencing library, to differ from those from PCR amplification.</p> Fig 4. Simulated sequencing library <p>For sample 0, the chosen gene symbols of gene 3 are recorded, which correspond to the taken truncated sequences by order.</p> Fig 5. Seeds for simulating cDNAs  <ol> <li> <p>Alemu Takele Assefa, Jo Vandesompele, Olivier Thas, SPsimSeq: semi-parametric simulation of bulk and single-cell RNA-sequencing data, Bioinformatics, Volume 36, Issue 10, May 2020, Pages 3276\u20133278, https://doi.org/10.1093/bioinformatics/btaa105\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial/1.%20Sequencing%20library/1.4%20Single-cell%20RNA-seq/","title":"1.4 Single cell RNA seq","text":"<p><code>tresor.sc.library</code> is the module that can simulate sequencing libraries at the single-cell RNA-seq (scRNA-seq) level. This is used to simulate reads that are tagged by genes expressed in cells, respectively.</p>"},{"location":"tutorial/1.%20Sequencing%20library/1.4%20Single-cell%20RNA-seq/#usage","title":"Usage","text":"PythonShell <pre><code>ts.sc.library(\n    r_root='D:/Programming/R/R-4.3.2/',\n    num_genes=6,\n    num_cells=2,\n    simulator='spsimseq',\n\n    seq_num=50,\n    len_params={\n        'umi': {\n            'umi_unit_pattern': 3,\n            'umi_unit_len': 12,\n        },\n        'seq': 100,\n    },\n    seq_params={\n        'custom': 'BAGC',\n        'custom_1': 'V',\n    },\n    material_params={\n        'bc_lib_fpn': to('data/3M-february-2018.txt'),  # None\n        'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n    },\n    is_seed=True,\n\n    working_dir=to('data/simu/docs/'),\n\n    condis=['umi', 'custom', 'seq', 'custom_1'],\n\n    sim_thres=3,\n    permutation=0,\n\n    mode='short_read',  # long_read short_read\n\n    verbose=False,\n)\n</code></pre> <pre><code>tresor library_sc \\\n-cfpn ./tresor/data/libgene.yml \\\n-snum 50 \\\n-rfpn D:/Programming/R/R-4.3.2/ \\\n-ncell 2 \\\n-ngene 20 \\\n-gsimulator spsimseq \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre> <p>Code highlighted is executed as equivalent to do coding in the following way. We employed the SPsimSeq tool<sup>1</sup> to simulate scRNA-seq data. In this case, we simulated a cell-by-gene count matrix containing 6 genes and 2 cells.</p> <pre><code>import tresor as ts\n\ngmat = ts.gmat.spsimseq_sc(\n    R_root='D:/Programming/R/R-4.3.2/',\n    num_genes=6,\n    num_cells=2,\n)\n\nprint(gmat)\n</code></pre> <p>The count matrix is formed below. <pre><code>18/07/2024 02:22:24 logger: =========&gt;spsimseq is being used\nSPsimSeq package version 1.12.0 \nR[write to console]: Estimating featurewise correlations ...\n\nR[write to console]: Selecting candidate DE genes ...\n\nR[write to console]: Fitting zero probability model ...\n\nR[write to console]: Estimating densities ...\n\nR[write to console]: Configuring design ...\n\nR[write to console]: Simulating data ...\n\nR[write to console]:  ...1 of 1\n\n18/07/2024 02:22:32 logger: =========&gt;spsimseq completes simulation\n18/07/2024 02:22:32 logger: =========&gt;spsimseq simu result:\n $a\n       Sample_1 Sample_2\nGene_1        0       50\nGene_2        1        0\nGene_3        0        0\nGene_4        0       14\nGene_5       12      223\n\n$b\n         Batch Group sim.Lib.Size\nSample_1     1     1          543\nSample_2     1     2         1980\n\n$c\n       DE.ind       source.ID\nGene_1   TRUE ENSG00000138160\nGene_2  FALSE ENSG00000267534\nGene_3  FALSE ENSG00000196358\nGene_4  FALSE ENSG00000142634\nGene_5  FALSE ENSG00000101608\n\n\n        Gene_1  Gene_2  Gene_3  Gene_4  Gene_5\nCell_0     0.0     1.0     0.0     0.0    12.0\nCell_1    50.0     0.0     0.0    14.0   223.0\n</code></pre></p> <p>Then, we use this count matrix as input to Tresor's corresponding module <code>ts.sc.library</code>.</p>"},{"location":"tutorial/1.%20Sequencing%20library/1.4%20Single-cell%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database. If a barcode library is provided and specified in <code>bc_lib_fpn</code>, it will be used to sample barcodes. <code>num_genes</code> number of genes <code>num_cells</code> number of cells <code>r_root</code> path to the R executable <code>simulator</code> computational tool to generate a cell-by-gene count matrix <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>rfpn</code> path to the R executable <code>ncell</code> number of cells <code>ngene</code> number of genes <code>gsimulator</code> computational tool to generate a cell-by-gene count matrix <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results <p>```</p>"},{"location":"tutorial/1.%20Sequencing%20library/1.4%20Single-cell%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/1.%20Sequencing%20library/1.4%20Single-cell%20RNA-seq/#console","title":"Console","text":"<pre><code>{'seq_num': 50, 'seq_params': {'custom': 'BAGC', 'custom_1': 'V'}, 'material_params': {'fasta_cdna_fpn': 'D:\\\\Document\\\\Programming\\\\Python\\\\tresor\\\\tresor\\\\data/Homo_sapiens.GRCh38.cdna.all.fa.gz'}, 'mode': 'short_read'}\nFinished\n</code></pre>"},{"location":"tutorial/1.%20Sequencing%20library/1.4%20Single-cell%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated sequencing library are shown in the following picture.</p> Fig 1. Generated files of a sequencing library <p>Annotation</p> <p>We take the expression count of 15 (cell 0 and gene 4) as an example.</p> <ul> <li>seq_c_0_g_4.txt - sequences for cell 0 and gene 4</li> <li>umi_c_0_g_4.txt - UMIs for cell 0 and gene 4</li> <li>barcode.txt - barcodes</li> <li>cdna_ids_alone_c_0_g_4.txt - cDNA IDs for cell 0 and gene 4</li> </ul> <p>In this case, we used homotrimer blocks to simulate UMIs where the length of each UMI is set to be 36 containing 12 trimer blocks.</p> Fig 2. Simulated UMIs <p>Because of a barcode library provided, Tresor seeks barcodes from it.</p> Fig 3. Simulated barcodes <p>The sequences are randomly chosen from the input human cDNAs and truncated according to the length of each short read. </p> Fig 4. Simulated genomics sequences <p>The sequencing library is tabulated to a dataframe. Each row shows the necessary information about the read 1</p> <ol> <li>Sequence</li> <li>Identifier</li> <li>Source</li> </ol> <p>Attention</p> <p>The identifier is composed of ID of the molecule, character <code>c</code> for cell, ID of the cell, character <code>g</code> for gene, and ID of the gene, demarked by *.</p> <p>Init means a read 1 is a sequence from the sequencing library, to differ from those from PCR amplification.</p> Fig 5. Simulated sequencing library <p>For cell 0, the chosen gene symbols of gene 4 are recorded, which correspond to the taken truncated sequences by order.</p> Fig 6. Seeds for simulating cDNAs  <ol> <li> <p>Alemu Takele Assefa, Jo Vandesompele, Olivier Thas, SPsimSeq: semi-parametric simulation of bulk and single-cell RNA-sequencing data, Bioinformatics, Volume 36, Issue 10, May 2020, Pages 3276\u20133278, https://doi.org/10.1093/bioinformatics/btaa105\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial/2.%20Bead%20synthesis/2.1%20Overview/","title":"2.1 Overview","text":"<p>We usually correct errors from UMIs after RNA sequencing. What if there've been issues with UMIs before they are put for sequencing? We have put forward this significant concern and carried out our latest research endeavor on addressing bead synthesis errors through enhancements in bead design. This work can be read from the BioRxiv paper.</p> <p>Question</p> <ol> <li> <p>What causes this?</p> <p> Errors, including substitutions, insertions, and deletions.</p> </li> <li> <p>How can we mitigate this concern?</p> <p> Analysis and validation on reads with computationally simutated substitutions, insertions, and deletions during the generation of sequencing libraries.</p> </li> </ol> <p>Our quest for what causes this and how we can mitigate this has made us to come up with a technical plan, called anchor-enhanced technology, and validate its effectiveness through simulations.</p> <p>Solution</p> <p> Applying simulated substitutions, insertions, and deletions to read 1 sequences and using the reads for validation of whether or not anchor-placed reads are identified better than those that are normal.</p> <p>For example, our recent study demonstrates that bespoke in silico simulations in the Drop-seq context can determine optimal positions for anchor sequences in oligonucleotide synthesis to mitigate errors.  Additionally, these bespoke in silico simulations are supportive of quantifying the contribution of bead synthesis errors to the overall sequencing error profile. Based on the fact that one out of ten Drop-seq beads suffering from deletion errors according to Zhang et al., our simulations initiated with 50 molecules at one gene-by-cell type estimate around 8-14% of final sequencing reads suffering from bead synthesis-induced errors, and notably, this figure can even become doubled if the PCR error rate is elevated by one order of magnitude (i.e., 1e-4 to 1e-3).</p>"},{"location":"tutorial/2.%20Bead%20synthesis/2.2%20Single-locus/","title":"2.2 Single locus","text":"<p><code>tresor.locus.library</code> can be used to simulate substitutions, deletions, and insertions during bead synthesis in the context of a given genomic locus.</p>"},{"location":"tutorial/2.%20Bead%20synthesis/2.2%20Single-locus/#usage","title":"Usage","text":"<p>We use keywords <code>bead_mut_rate</code>, <code>bead_del_rate</code>, and <code>bead_ins_rate</code> to tell Tresor the error rates of substitutions, deletions, and insertions. They activate upon setting<code>bead_mutation</code>, <code>bead_deletion</code>, and <code>bead_insertion</code> as <code>True</code>. We highlight where the code works for this purpose in the <code>tresor.locus.library</code> command. There are a few studies in connection with synthesis error rates <sup>1</sup><sup>&amp;</sup><sup>2</sup>.</p> <p>To show an observable change in the length of reads after applying indels, <code>bead_ins_rate</code> increases to 0.1 supposedly.</p> PythonShell <pre><code>import tresor as ts\n\nts.locus.library(\n    seq_num=50,\n    len_params={\n        'umi': {\n            'umi_unit_pattern': 3,\n            'umi_unit_len': 12,\n        },\n        'seq': 100,\n    },\n    seq_params={\n        'custom': 'AAGC',  # BAGC\n        'custom_1': 'V',\n    },\n    material_params={\n        'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n    },\n    is_seed=True,\n\n    working_dir=to('data/simu/docs/'),\n\n    bead_mutation=True,  # True False\n    bead_mut_rate=1e-4,  # 0.016 0.00004\n    bead_deletion=True,  # True False\n    bead_insertion=True,\n    bead_del_rate=0.1,  # 0.016 0.00004, 2.4e-7\n    bead_ins_rate=7.1e-7,  # 0.011 0.00001, 7.1e-7\n\n    condis=['umi', 'custom', 'seq', 'custom_1'],\n    sim_thres=3,\n    permutation=0,\n\n    mode='short_read',  # long_read short_read\n\n    verbose=False,  # False True\n)\n</code></pre> <pre><code>tresor library_sl \\\n-cfpn ./tresor/data/libslocus.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/2.%20Bead%20synthesis/2.2%20Single-locus/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>bead_mutation</code> if mutations are simutated during the period of building libraries. <code>False</code> by default <code>bead_mut_rate</code> mutation rate. Workable when bead_mutation is set to <code>True</code> <code>bead_deletion</code> if mutations are simutated during the period of building libraries. <code>False</code> by default <code>bead_del_rate</code> deletion rate. Workable when bead_deletion is set to <code>True</code>. <code>bead_insertion</code> if mutations are simutated during the period of building libraries. <code>False</code> by default <code>bead_ins_rate</code> insertion rate. Workable when bead_insertion is set to <code>True</code> <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results <p>```</p>"},{"location":"tutorial/2.%20Bead%20synthesis/2.2%20Single-locus/#extension","title":"Extension","text":"<p>Tip</p> <p>We can flexibly design the structure of a read by adding different components to <code>condis</code> separated by comma. For example, there is an initial read containing only a UMI. <pre><code>condis=['umi'],\n</code></pre></p> <p>Next, we can add a <code>seq</code> next to it. <pre><code>condis=['umi', 'seq'],\n</code></pre></p> <p>If we have a read containing many bespoke parts, <code>primer</code>, <code>primer_1</code>, <code>spacer</code>, <code>spacer_1</code>, <code>adapter</code>, <code>adapter_1</code>,<code>umi</code>, <code>umi_1</code>, 'seq', and 'seq_2', we can set <code>condis</code> just as <pre><code>condis=['umi', 'primer', 'primer_1', 'spacer', 'spacer_1', 'adapter', 'adapter_1', 'seq', 'seq_2', 'umi_1'],\n</code></pre></p> <p>Then, we can add the corresponding lengths of the parts/components in <code>len_params</code> as follows. <pre><code>len_params={\n    'umi': {\n        'umi_unit_pattern': 3,\n        'umi_unit_len': 12,\n    },\n    'umi_1': {\n        'umi_unit_pattern': 3,\n        'umi_unit_len': 12,\n    },\n    'seq': 100,\n    'seq_2': 100,\n    'adapter': 10,\n    'adapter_1': 10,\n    'primer': 10,\n    'primer_1': 10,\n    'spacer': 10,\n    'spacer_1': 10,\n},\n</code></pre></p> <p>If you have known sequences of some components in read 1, you can use <code>seq_params</code> to specify customed sequences. The following settings were used in our recently released biotechnology, anchor-enhanced technology, for elevating the discovery of long-reads. We placed an anchor sequence <code>BAGC</code> and a <code>V</code> base in between the read 1 sequence where B means any type of a base. Tresor was used for simulating reads with the two custom sequences placed as follows. <pre><code>seq_params={\n    'custom': 'AAGC',  # BAGC\n    'custom_1': 'V',\n},\n</code></pre></p>"},{"location":"tutorial/2.%20Bead%20synthesis/2.2%20Single-locus/#output","title":"Output","text":""},{"location":"tutorial/2.%20Bead%20synthesis/2.2%20Single-locus/#console","title":"Console","text":"<pre><code>17/07/2024 22:10:20 logger: Initialisation and parameters: \n{'seq_params': {'custom': 'AAGC', 'custom_1': 'V'}, 'material_params': {'fasta_cdna_fpn': None}, 'mode': 'short_read', 'bead_mutation': True, 'bead_mut_rate': 0.0001, 'bead_deletion': True, 'bead_del_rate': 0.016, 'bead_insertion': True, 'bead_ins_rate': 0.1}\n17/07/2024 22:10:20 logger: ======&gt;Sequencing library preparation starts\n17/07/2024 22:10:20 logger: ======&gt;Condition map: {'umi': ['alone'], 'custom': ['alone', '1'], 'seq': ['alone']}\n17/07/2024 22:10:20 logger: ======&gt;Read 1 generation\n17/07/2024 22:10:20 logger: =========&gt;UMI generation start\n17/07/2024 22:10:20 logger: ============&gt;UMI condition 0: umi\n17/07/2024 22:10:20 logger: =========&gt;Sequence generation start\n17/07/2024 22:10:20 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 1: custom_1\n17/07/2024 22:10:20 logger: ======&gt;Read 2 generation\n17/07/2024 22:10:20 logger: =========&gt;UMI generation start\n17/07/2024 22:10:20 logger: ============&gt;UMI condition 0: umi\n17/07/2024 22:10:20 logger: =========&gt;Sequence generation start\n17/07/2024 22:10:20 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 1: custom_1\n17/07/2024 22:10:20 logger: ======&gt;Read 3 generation\n17/07/2024 22:10:20 logger: =========&gt;UMI generation start\n17/07/2024 22:10:20 logger: ============&gt;UMI condition 0: umi\n17/07/2024 22:10:20 logger: =========&gt;Sequence generation start\n17/07/2024 22:10:20 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 1: custom_1\n\n...\n\n17/07/2024 22:10:20 logger: ======&gt;Read 49 generation\n17/07/2024 22:10:20 logger: =========&gt;UMI generation start\n17/07/2024 22:10:20 logger: ============&gt;UMI condition 0: umi\n17/07/2024 22:10:20 logger: =========&gt;Sequence generation start\n17/07/2024 22:10:20 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 1: custom_1\n17/07/2024 22:10:20 logger: ======&gt;Read 50 generation\n17/07/2024 22:10:20 logger: =========&gt;UMI generation start\n17/07/2024 22:10:20 logger: ============&gt;UMI condition 0: umi\n17/07/2024 22:10:20 logger: =========&gt;Sequence generation start\n17/07/2024 22:10:20 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 1: custom_1\n17/07/2024 22:10:20 logger: ===&gt;Time for sequencing library preparation: 0.200s\n</code></pre>"},{"location":"tutorial/2.%20Bead%20synthesis/2.2%20Single-locus/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated sequencing library are shown in the following picture. The cDNA library for reference is not used. Randomly simulating reads is enabled.</p> Fig 1. Generated files of a sequencing library <p>In this case, we used homotrimer blocks to simulate UMIs where the length of each UMI is set to be 36 containing 12 trimer blocks.</p> Fig 2. Simulated UMIs <p>The sequences are randomly chosen from the input human cDNAs and truncated according to the length of each short read. </p> Fig 3. Simulated genomics sequences <p>The sequencing library is tabulated to a dataframe. Each row shows the necessary information about the read 1</p> <ol> <li>Sequence</li> <li>Identifier</li> <li>Source</li> </ol> <p>Init means a read 1 is a sequence from the sequencing library, to differ from those from PCR amplification.</p> <p>Here, we can see a clear difference in the length of simulated reads. Most of reads have increased because of a high insertion rate is set to test the function.</p> Fig 4. Simulated sequencing library <p>We set a big integer as an initial seed to sequentially simulate each UMI sequence. Then, users can use the saved seeds to reproduce the experiment.</p> Fig 5. Seeds for simulating UMIs  <p>Seeds used for simulating genomic sequences are recorded.</p> Fig 6. Seeds for simulating sequences  <ol> <li> <p>Potapov V, Ong JL (2017) Examining Sources of Error in PCR by Single-Molecule Sequencing. PLOS ONE 12(1): e0169774. https://doi.org/10.1371/journal.pone.0169774\u00a0\u21a9</p> </li> <li> <p>Mitchell, K., Brito, J.J., Mandric, I. et al. Benchmarking of computational error-correction methods for next-generation sequencing data. Genome Biol 21, 71 (2020). https://doi.org/10.1186/s13059-020-01988-3\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial/2.%20Bead%20synthesis/2.3%20Error-propagation/","title":"2.3 Error propagation","text":"<p>We developed a method for estimating error propagation through PCR amplification. Specifically, we track all types of nucleotide-level errors introduced during library preparation, along with their error types. This information is recorded in a table that provides a per-sequence breakdown of error status. We had a specific analysis here  using the method.</p> <p>The table contains four columns: the first three correspond to substitution, deletion, and insertion errors for <code>mut</code>, <code>del</code>, and <code>ins</code>, respectively. The fourth column indicates whether the sequence acquired an error during PCR amplification. At the time of initial library preparation, this fourth column is set to False for all entries. With each round of PCR amplification, the table is updated accordingly. Each row represents a single sequence.</p> <p>Before sampling, the table looks like: <pre><code>      mut    del    ins  pcr_err_mark\n0   False  False  False         False\n1   False  False  False         False\n2   False  False  False         False\n3   False  False  False         False\n4   False  False  False         False\n5   False  False  False         False\n6   False  False  False         False\n7   False   True  False         False\n8   False  False  False         False\n9   False  False  False         False\n10  False  False  False         False\n11  False  False  False         False\n12  False  False  False         False\n13  False  False  False         False\n14  False  False  False         False\n15  False   True  False         False\n16  False  False  False         False\n17  False  False  False         False\n18  False  False  False         False\n19  False  False  False         False\n20  False   True  False         False\n21  False  False  False         False\n22  False  False  False         False\n23  False  False  False         False\n24  False   True  False         False\n25  False  False  False         False\n26  False  False  False         False\n27  False  False  False         False\n28  False  False  False         False\n29  False  False  False         False\n30  False  False  False         False\n31  False  False  False         False\n32  False  False  False         False\n33  False  False  False         False\n34  False  False  False         False\n35  False  False   True         False\n36  False  False  False         False\n37  False  False   True         False\n38  False  False  False         False\n39  False   True  False         False\n40  False  False  False         False\n41  False  False  False         False\n42  False  False  False         False\n43  False  False   True         False\n44  False  False  False         False\n45  False  False  False         False\n46  False  False   True         False\n47  False  False  False         False\n48  False  False  False         False\n49  False  False  False         False\n</code></pre></p> <p>Before sampling, the table looks like:</p> <pre><code>         mut    del    ins  pcr_err_mark\n0       True  False  False         False\n1      False  False  False         False\n2      False  False  False         False\n3      False  False  False         False\n4      False   True  False         False\n...      ...    ...    ...           ...\n23809  False  False  False          True\n23810  False  False  False         False\n23811  False   True  False         False\n23812  False  False   True         False\n23813  False  False  False         False\n\n[23814 rows x 4 columns]\n</code></pre> <p>After sampling (500 reads as sequencing depth), the table looks like:</p> <pre><code>       mut    del    ins  pcr_err_mark\n0    False  False  False         False\n1    False  False  False         False\n2    False  False  False         False\n3    False   True  False         False\n4    False  False  False         False\n..     ...    ...    ...           ...\n495  False   True  False         False\n496  False  False  False         False\n497  False  False  False         False\n498  False   True  False         False\n499  False  False  False         False\n\n[500 rows x 4 columns]\n</code></pre>"},{"location":"tutorial/2.%20Bead%20synthesis/2.3%20Error-propagation/#error_rate_estimation_bead_synthesis_and_pcr_amplification","title":"Error Rate Estimation: Bead Synthesis and PCR Amplification","text":"<p>To quantify error propagation in sequencing, we define the following two key metrics based on per-read error flags. We first define a few symbols.</p> <ul> <li>Let \\( N \\) be the total number of reads.</li> <li> <p>For each read \\( i \\) (where \\( i = 1, 2, \\dots, N \\))</p> </li> <li> <p>\\( d_i = 1 \\) if a deletion error occurred during bead synthesis, otherwise \\( d_i = 0 \\).</p> </li> <li>\\( p_i = 1 \\) if an error occurred during PCR amplification, otherwise \\( p_i = 0 \\).</li> </ul> <p>We calculate the proportion of reads with errors from either bead synthesis or PCR amplification.</p> \\[ u_{\\text{bead \u222a PCR}} = \\frac{1}{N} \\sum_{i=1}^{N} \\mathbb{f}(d_i = 1 \\ \\text{or} \\ p_i = 1) \\] <p>where \\( \\mathbb{f}(\\cdot) \\) is a function that is equal to 1 if the condition is true, and 0 otherwise.</p> <p>We calculate the proportion of reads that have a deletion error during bead synthesis, regardless of PCR status.</p> \\[ u_{\\text{bead}} = \\frac{1}{N} \\sum_{i=1}^{N} \\mathbb{I}(d_i = 1) \\] <p>These equations were directly computed.</p> <pre><code>err_union = df['del'] | df['pcr_err_mark']\n\np_bead_or_pcr = err_union[err_union].shape[0] / err_union.shape[0]\n\np_bead = df[df['del']].shape[0] / df.shape[0]\n</code></pre>"},{"location":"tutorial/2.%20Bead%20synthesis/2.4%20Anchor-simulation/","title":"2.4 Anchor simulation","text":"<p>To evaluate the effectiveness and robustness of anchor-based UMI identification versus a positional-based method under varying error rates (from \\(10^{-5}\\) to 0.1), in the presence of:</p> <ul> <li>PCR errors</li> <li>Sequencing errors</li> <li>Insertion/deletion errors</li> </ul> <p>Please see this tutorial  for the Tresor application with UMIche.</p>"},{"location":"tutorial/2.%20Bead%20synthesis/2.4%20Anchor-simulation/#1_efficiency_metric_for_umi_identification","title":"1. Efficiency metric for UMI identification","text":"<p>To assess how well UMIs can be discovered under either strategy, we define:</p> \\[ P = \\frac{n}{N} \\] <p>where:</p> <ul> <li>\\(N = 5000\\): Total number of subsampled reads</li> <li>\\(n\\): Number of reads whose UMIs were successfully identified</li> </ul> <p>This is used to compare the performance between:</p> <ul> <li>Positional strategy (based on fixed offsets in primer sequence)</li> <li>Anchor strategy (using inserted sequences such as BAGC and a terminal base V)</li> </ul>"},{"location":"tutorial/2.%20Bead%20synthesis/2.4%20Anchor-simulation/#2_robustness_against_indel_errors","title":"2. Robustness against indel errors","text":"<p>To assess how well UMIs can be extracted in the presence of indels, we define:</p> \\[ Q = \\frac{m}{N} \\] <p>Where:</p> <ul> <li>\\(m\\): Number of reads with successfully identified UMIs under anchor design</li> <li>\\(N\\): Total number of simulated reads</li> <li>The denominator remains the same as in \\(P\\), allowing for fair comparison</li> </ul> <p>This metric isolates the impact of indel tolerance, contrasting anchor-based extraction vs. methods without anchor (assuming indel-free reads).</p>"},{"location":"tutorial/2.%20Bead%20synthesis/2.4%20Anchor-simulation/#3_logistic_fit_function_for_captured_read_quantity","title":"3. Logistic fit function for captured read quantity","text":"<p>A logistic function is fitted to characterise how performance (i.e., estimated numbers of captured reads) degrades as error rate increases:</p> \\[ l(x) = \\frac{a}{1 + e^{-b(x - c)}} + \\varepsilon \\] <p>Where:</p> <ul> <li>\\(x\\): P and Q</li> <li>\\(a, b, c\\): Parameters to fit</li> </ul> <p>This model helps quantify robustness of each method to increasing error rates.</p> <p>Both simulations used a wide range of error rates:</p> \\[ 10^{-5},\\ 2.5 \\times 10^{-5},\\ 5 \\times 10^{-5},\\ 7.5 \\times 10^{-5},\\ 0.0001,\\ 0.00025,\\ 0.0005,\\ 0.00075,\\ 0.001,\\ 0.0025,\\ 0.005,\\ 0.0075,\\ 0.01,\\ 0.025,\\ 0.05,\\ 0.075,\\ 0.1 \\] <p>These allow for comprehensive simulation-based benchmarking of UMI extraction robustness under real-world sequencing noise conditions.</p>"},{"location":"tutorial/3.%20Count%20matrix/3.1%20Overview/","title":"3.1 Overview","text":"<p>Tresor uses a count matrix as input to generate reads observed at the bulk and single-cell levels. It can use a count matrix read from a h5 file or generated by an external tool, such as SPsimSeq tool<sup>1</sup>.</p> <p>Solution</p> API Function <code>ts.spsimseq_bulk</code> bulk RNA-seq <code>ts.spsimseq_sc</code> scRNA-seq <ol> <li> <p>Alemu Takele Assefa, Jo Vandesompele, Olivier Thas, SPsimSeq: semi-parametric simulation of bulk and single-cell RNA-sequencing data, Bioinformatics, Volume 36, Issue 10, May 2020, Pages 3276\u20133278, https://doi.org/10.1093/bioinformatics/btaa105\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial/3.%20Count%20matrix/3.2%20Bulk%20RNA-seq/","title":"3.2 Bulk RNA seq","text":"<p><code>ts.spsimseq_bulk</code> is the module that can simulate reads consisting of only UMIs per each, or UMI+Genomic sequence per each. The general-purpose design gives the module this name. To achieve this purpose, a case-study CLI should look like below:</p>"},{"location":"tutorial/3.%20Count%20matrix/3.2%20Bulk%20RNA-seq/#usage","title":"Usage","text":"PythonCommand <pre><code>import tresor as ts\n\ngspl = ts.gmat.spsimseq_bulk(\n    R_root='D:/Programming/R/R-4.3.2/',\n    num_samples=2,\n    num_genes=10,\n    simulator='spsimseq',\n    sv_fpn=to('data/spsimseq_bulk.h5'),\n)\nprint(gspl)\n</code></pre> <pre><code>tresor gmat_bulk \\\n-rfpn D:/Programming/R/R-4.3.2/ \\\n-nspl 2 \\\n-ngene 10 \\\n-gsimulator spsimseq \\\n-wd ./tresor/data/spsimseq_bulk.h5 \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/3.%20Count%20matrix/3.2%20Bulk%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> Unordered ListOrdered List bubble_sort.py<pre><code>R_root='D:/Programming/R/R-4.3.2/',\nnum_samples=2,\nnum_genes=10,\nsimulator='spsimseq',\nsv_fpn=to('data/spsimseq_bulk.h5'),\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"tutorial/3.%20Count%20matrix/3.2%20Bulk%20RNA-seq/#output","title":"Output","text":"<pre><code>12/12/2023 02:02:41 logger: =========&gt;spsimseq is being used\nSPsimSeq package version 1.12.0 \nR[write to console]: Estimating featurewise correlations ...\n\nR[write to console]: Selecting candidate DE genes ...\n\nR[write to console]: Estimating densities ...\n\nR[write to console]: Configuring design ...\n\nR[write to console]: Simulating data ...\n\nR[write to console]:  ...1 of 1\n\n12/12/2023 02:02:48 logger: =========&gt;spsimseq completes simulation\n          Gene_1  Gene_2  Gene_3  Gene_4  ...  Gene_7  Gene_8  Gene_9  Gene_10\nSample_1     0.0     0.0     0.0     0.0  ...   322.0   425.0     7.0   1202.0\nSample_2     1.0     2.0     2.0     2.0  ...   633.0   423.0    87.0   1619.0\n\n[2 rows x 10 columns]\n</code></pre>"},{"location":"tutorial/3.%20Count%20matrix/3.3%20scRNA-seq/","title":"3.3 scRNA seq","text":"<p>is a module that can simulate reads consisting of only UMIs per each, or UMI+Genomic sequence per each. The general-purpose design gives the module this name. To achieve this purpose, a case-study CLI should look like below:</p>"},{"location":"tutorial/3.%20Count%20matrix/3.3%20scRNA-seq/#gene-by-cell_matrix","title":"Gene-by-cell matrix","text":"PythonShell <pre><code>import tresor as ts\n\ngbycell, _, _ = ts.spsimseq_sc(\n    R_root='D:/Programming/R/R-4.3.2/',\n    num_genes=10,\n    num_cells=10,\n    simulator='spsimseq',\n    sv_fpn=to('data/spsimseq_sc.h5'),\n)\nprint(gbycell)\n</code></pre> <pre><code>tresor gmat_sc \\\n-rfpn D:/Programming/R/R-4.3.2/ \\ \n-ncell 10 \\ \n-ngene 10 \\ \n-gsimulator spsimseq \\ \n-wd ./tresor/data/spsimseq_sc.h5 \\ \n-is True \\ \n-vb True\n</code></pre>"},{"location":"tutorial/3.%20Count%20matrix/3.3%20scRNA-seq/#output","title":"Output","text":"<pre><code>12/12/2023 00:37:15 logger: =========&gt;spsimseq is being used\nSPsimSeq package version 1.12.0 \nR[write to console]: Estimating featurewise correlations ...\n\nR[write to console]: Selecting candidate DE genes ...\n\nR[write to console]: Fitting zero probability model ...\n\nR[write to console]: Estimating densities ...\n\nR[write to console]: Configuring design ...\n\nR[write to console]: Simulating data ...\n\nR[write to console]:  ...1 of 1\n\n12/12/2023 00:37:23 logger: =========&gt;spsimseq completes simulation\n12/12/2023 00:37:23 logger: =========&gt;spsimseq simu result:\n $a\n        Sample_1 Sample_2 Sample_3 Sample_4 Sample_5 Sample_6 Sample_7 Sample_8\nGene_1         6       66       15       16       28       12      253       57\nGene_2         0       96        0        0        0        0      122       38\nGene_3         0        0        0       40        0        0        0        0\nGene_4        52       34       20       15       18       14       14       43\nGene_5         0       98       37        0        0        0       17        0\nGene_6         0        0        0        0        0        0        0        0\nGene_7         0        0        0        0        0        0        0        0\nGene_8         0        0        0        0        0        0        0        0\nGene_9         0      188        7      153       23        0      201       20\nGene_10        1        0        0        0        0        0       31        0\n        Sample_9 Sample_10\nGene_1         5         6\nGene_2         4         6\nGene_3         0         7\nGene_4         1         1\nGene_5         0         0\nGene_6         0         0\nGene_7         0         0\nGene_8         0         0\nGene_9         0        60\nGene_10        0         3\n\n$b\n          Batch Group sim.Lib.Size\nSample_1      1     1          543\nSample_2      1     1         1980\nSample_3      1     1          950\nSample_4      1     1         1098\nSample_5      1     1          711\nSample_6      1     2          147\nSample_7      1     2         1568\nSample_8      1     2         1425\nSample_9      1     2          933\nSample_10     1     2          475\n\n$c\n        DE.ind       source.ID\nGene_1    TRUE ENSG00000138160\nGene_2    TRUE ENSG00000138160\nGene_3   FALSE ENSG00000066322\nGene_4   FALSE ENSG00000101608\nGene_5   FALSE ENSG00000130066\nGene_6   FALSE ENSG00000196358\nGene_7   FALSE ENSG00000273674\nGene_8   FALSE ENSG00000269694\nGene_9   FALSE ENSG00000162992\nGene_10  FALSE ENSG00000142634\n\n\n        Gene_1  Gene_2  Gene_3  Gene_4  ...  Gene_7  Gene_8  Gene_9  Gene_10\nCell_0     6.0     0.0     0.0    52.0  ...     0.0     0.0     0.0      1.0\nCell_1    66.0    96.0     0.0    34.0  ...     0.0     0.0   188.0      0.0\nCell_2    15.0     0.0     0.0    20.0  ...     0.0     0.0     7.0      0.0\nCell_3    16.0     0.0    40.0    15.0  ...     0.0     0.0   153.0      0.0\nCell_4    28.0     0.0     0.0    18.0  ...     0.0     0.0    23.0      0.0\nCell_5    12.0     0.0     0.0    14.0  ...     0.0     0.0     0.0      0.0\nCell_6   253.0   122.0     0.0    14.0  ...     0.0     0.0   201.0     31.0\nCell_7    57.0    38.0     0.0    43.0  ...     0.0     0.0    20.0      0.0\nCell_8     5.0     4.0     0.0     1.0  ...     0.0     0.0     0.0      0.0\nCell_9     6.0     6.0     7.0     1.0  ...     0.0     0.0    60.0      3.0\n\n[10 rows x 10 columns]\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.1%20Overview/","title":"4.1.1 Overview","text":"<p>PCR (Polymerase Chain Reaction) amplification efficiency measures how effectively a DNA template is replicated in each cycle. In an ideal PCR reaction, the DNA amount doubles every cycle, corresponding to an amplification efficiency of 100%. However, in practice, amplification efficiency often falls short of this assumption due to various factors, including,</p> <ul> <li>Template Quality: Degraded or impure DNA can hinder the PCR process.</li> <li>Primer Design: Primers must specifically and efficiently bind to the target DNA, avoiding secondary structures or dimers.</li> <li>Reagent Concentrations: Optimal levels of dNTPs, MgCl2, and polymerase are essential for efficient amplification.</li> <li>Thermal Cycling Conditions: Proper annealing and extension temperatures and times are necessary for effective DNA synthesis.</li> <li>Inhibitors: Substances like ethanol, phenol, or excessive salts can inhibit the PCR reaction. </li> </ul> <p>Amplification efficiency is often quantified by examining the exponential phase of the PCR reaction through quantitative PCR (qPCR). </p> <p>Sparkling</p> <p>Thus, studying PCR amplification efficiency at various rates can help us understanding how reads are generated and rendered in the sequencing library finally.</p>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.2%20Single-locus/","title":"4.1.2 Single locus","text":"<p><code>tresor.locus.simu_ampl_rate</code> is a Python function in charge of simulating reads with respect to a series of amplication rates in the context of a given genomic locus.</p>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.2%20Single-locus/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at amplication efficiencies from 0.1 to 1.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.locus.simu_ampl_rate(\n        # initial sequence generation\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 1,\n                'umi_unit_len': 10,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=perm_i,\n\n        # PCR amplification setting\n        ampl_rates=np.linspace(0.1, 1, 10),\n        err_route='err2d',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-5,\n        pcr_num=8,\n        err_num_met='nbinomial', # nbinomial\n\n        # sequencing setting\n        seq_error=0.001,\n        # seq_sub_spl_number=200, # None\n        seq_sub_spl_rate=1,  # 0.333\n\n        use_seed=True,\n        seed=1,\n\n        verbose=True,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n    )\n</code></pre> <pre><code>tresor amplrate_sl \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.2%20Single-locus/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rates</code> list of float numbers ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.2%20Single-locus/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.2%20Single-locus/#console","title":"Console","text":"<pre><code>17/07/2024 22:10:20 logger: Initialisation and parameters: \n{'seq_params': {'custom': 'AAGC', 'custom_1': 'V'}, 'material_params': {'fasta_cdna_fpn': None}, 'mode': 'short_read', 'bead_mutation': True, 'bead_mut_rate': 0.0001, 'bead_deletion': True, 'bead_del_rate': 0.016, 'bead_insertion': True, 'bead_ins_rate': 0.1}\n17/07/2024 22:10:20 logger: ======&gt;Sequencing library preparation starts\n17/07/2024 22:10:20 logger: ======&gt;Condition map: {'umi': ['alone'], 'custom': ['alone', '1'], 'seq': ['alone']}\n17/07/2024 22:10:20 logger: ======&gt;Read 1 generation\n17/07/2024 22:10:20 logger: =========&gt;UMI generation start\n17/07/2024 22:10:20 logger: ============&gt;UMI condition 0: umi\n17/07/2024 22:10:20 logger: =========&gt;Sequence generation start\n17/07/2024 22:10:20 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 1: custom_1\n17/07/2024 22:10:20 logger: ======&gt;Read 2 generation\n17/07/2024 22:10:20 logger: =========&gt;UMI generation start\n17/07/2024 22:10:20 logger: ============&gt;UMI condition 0: umi\n17/07/2024 22:10:20 logger: =========&gt;Sequence generation start\n17/07/2024 22:10:20 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 1: custom_1\n17/07/2024 22:10:20 logger: ======&gt;Read 3 generation\n17/07/2024 22:10:20 logger: =========&gt;UMI generation start\n17/07/2024 22:10:20 logger: ============&gt;UMI condition 0: umi\n17/07/2024 22:10:20 logger: =========&gt;Sequence generation start\n17/07/2024 22:10:20 logger: ============&gt;Sequence condition 0: seq\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 0: custom\n17/07/2024 22:10:20 logger: ============&gt;Custom-designed condition 1: custom_1\n\n...\n\n19/07/2024 16:51:28 logger: ===&gt;Sequencing library generation starts\n19/07/2024 16:51:28 logger: Initialisation and parameters: \n{'mode': 'short_read', 'material_params': {'fasta_cdna_fpn': 'D:\\\\Document\\\\Programming\\\\Python\\\\tresor\\\\tresor\\\\data/Homo_sapiens.GRCh38.cdna.all.fa.gz'}, 'seq_params': {'custom': 'AAGC', 'custom_1': 'A'}}\n19/07/2024 16:51:28 logger: ======&gt;Sequencing library preparation starts\n19/07/2024 16:51:28 logger: ======&gt;Condition map: {'umi': ['alone'], 'seq': ['alone']}\n19/07/2024 16:51:28 logger: ======&gt;Read CDNAs from a reference ome\n19/07/2024 16:51:34 logger: ======&gt;There are 204083 genes in the reference genome\n19/07/2024 16:51:34 logger: ======&gt;Read 1 generation\n19/07/2024 16:51:34 logger: =========&gt;UMI generation start\n19/07/2024 16:51:34 logger: ============&gt;UMI condition 0: umi\n19/07/2024 16:51:34 logger: =========&gt;Sequence generation start\n19/07/2024 16:51:34 logger: ============&gt;Sequence condition 0: seq\n19/07/2024 16:51:34 logger: ======&gt;Read 2 generation\n19/07/2024 16:51:34 logger: =========&gt;UMI generation start\n19/07/2024 16:51:34 logger: ============&gt;UMI condition 0: umi\n19/07/2024 16:51:34 logger: =========&gt;Sequence generation start\n19/07/2024 16:51:34 logger: ============&gt;Sequence condition 0: seq\n\n...\n\n19/07/2024 16:51:34 logger: ======&gt;Read 49 generation\n19/07/2024 16:51:34 logger: =========&gt;UMI generation start\n19/07/2024 16:51:34 logger: ============&gt;UMI condition 0: umi\n19/07/2024 16:51:34 logger: =========&gt;Sequence generation start\n19/07/2024 16:51:34 logger: ============&gt;Sequence condition 0: seq\n19/07/2024 16:51:34 logger: ======&gt;Read 50 generation\n19/07/2024 16:51:34 logger: =========&gt;UMI generation start\n19/07/2024 16:51:34 logger: ============&gt;UMI condition 0: umi\n19/07/2024 16:51:34 logger: =========&gt;Sequence generation start\n19/07/2024 16:51:34 logger: ============&gt;Sequence condition 0: seq\n19/07/2024 16:51:34 logger: ===&gt;Time for sequencing library preparation: 6.698s\n19/07/2024 16:51:35 logger: ===&gt;Sequencing library has been generated\n19/07/2024 16:51:35 logger: ===&gt;PCR amplification starts...\n19/07/2024 16:51:35 logger: ======&gt;Assign parameters...\n19/07/2024 16:51:35 logger: ======&gt;0. Amplification rate: 0.1\n19/07/2024 16:51:35 logger: ===&gt;at PCR 1\n19/07/2024 16:51:35 logger: ===&gt;Error assignment method: err2d\n19/07/2024 16:51:35 logger: ======&gt;sampling...\n19/07/2024 16:51:35 logger: ======&gt;numbering...\n19/07/2024 16:51:35 logger: ======&gt;ordering...\n19/07/2024 16:51:35 logger: =========&gt;The number of objects to be shuffling: 50\n19/07/2024 16:51:35 logger: =========&gt;start shuffling...\n19/07/2024 16:51:35 logger: =========&gt;shuffling time: 0.0\n19/07/2024 16:51:35 logger: ======&gt;Generate PCR errors...\n19/07/2024 16:51:35 logger: =========&gt;The error 2D method is being used\n19/07/2024 16:51:35 logger: ======&gt;time for merging sequences 0.00s\n19/07/2024 16:51:35 logger: ======&gt;Summary report:\n19/07/2024 16:51:35 logger: =========&gt;PCR time: 0.00s\n19/07/2024 16:51:35 logger: =========&gt;the dimensions of the data: number of reads: (54, 3)\n19/07/2024 16:51:35 logger: =========&gt;the number of reads at this PCR: [], \n19/07/2024 16:51:35 logger: =========&gt;the number of nucleotides at this PCR: [], \n19/07/2024 16:51:35 logger: =========&gt;the number of errors at this PCR: [], \n\n...\n\n19/07/2024 16:51:38 logger: ===&gt;at PCR 8\n19/07/2024 16:51:38 logger: ===&gt;Error assignment method: err2d\n19/07/2024 16:51:38 logger: ======&gt;sampling...\n19/07/2024 16:51:38 logger: ======&gt;numbering...\n19/07/2024 16:51:38 logger: ======&gt;ordering...\n19/07/2024 16:51:38 logger: =========&gt;The number of objects to be shuffling: 6400\n19/07/2024 16:51:38 logger: =========&gt;start shuffling...\n19/07/2024 16:51:38 logger: =========&gt;shuffling time: 0.004994630813598633\n19/07/2024 16:51:38 logger: ======&gt;Generate PCR errors...\n19/07/2024 16:51:38 logger: =========&gt;The error 2D method is being used\n19/07/2024 16:51:39 logger: ======&gt;time for merging sequences 0.30s\n19/07/2024 16:51:39 logger: ======&gt;Summary report:\n19/07/2024 16:51:39 logger: =========&gt;PCR time: 0.55s\n19/07/2024 16:51:39 logger: =========&gt;the dimensions of the data: number of reads: (12800, 3)\n19/07/2024 16:51:39 logger: =========&gt;the number of reads at this PCR: [], \n19/07/2024 16:51:39 logger: =========&gt;the number of nucleotides at this PCR: [], \n19/07/2024 16:51:39 logger: =========&gt;the number of errors at this PCR: [], \n19/07/2024 16:51:39 logger: ======&gt;PCR amplification completes in 1.1190292835235596s\n19/07/2024 16:51:39 logger: ======&gt;Sequencing starts\n19/07/2024 16:51:39 logger: ======&gt;sampling...\n19/07/2024 16:51:39 logger: ======&gt;Generate sequencing errors...\n19/07/2024 16:51:39 logger: =========&gt;There are 12800 reads to be sequenced\n19/07/2024 16:51:39 logger: =========&gt;The position table construction starts\n19/07/2024 16:51:39 logger: =========&gt;Time for constructing the position table: 0.196s\n19/07/2024 16:51:39 logger: =========&gt;There are 1408000 nucleotides to be sequenced\n19/07/2024 16:51:39 logger: =========&gt;Determination of number of sequencing errors start\n19/07/2024 16:51:39 logger: ============&gt;There are 1388 nucleotide errors during sequencing\n19/07/2024 16:51:39 logger: =========&gt;Time for determining sequencing errors: 0.000s\n19/07/2024 16:51:39 logger: =========&gt;Sequencing error Assignment starts\n19/07/2024 16:51:39 logger: =========&gt;Time for assigning sequencing errors: 0.10s\n19/07/2024 16:51:39 logger: =========&gt;Sequencing time: 0.37s\n19/07/2024 16:51:39 logger: =========&gt;Sequencing has completed\n19/07/2024 16:51:39 logger: =========&gt;Reads write to files in FastQ format\n======&gt;simulation completes in 4.705037355422974s\n19/07/2024 16:51:39 logger: =========&gt;FastQ file is saved\n19/07/2024 16:51:39 logger: ======&gt;Simulation completes\n===&gt;Time: 11.667s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.2%20Single-locus/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.3%20Bulk%20RNA-seq/","title":"4.1.3 Bulk RNA seq","text":"<p><code>tresor.gene.simu_ampl_rate</code> is a Python function in charge of simulating reads with respect to a series of amplication rates at the bulk RNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.3%20Bulk%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at amplication efficiencies from 0.1 to 1.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.gene.simu_ampl_rate(\n        # initial sequence generation\n        gspl=gspl,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rates=np.linspace(0.1, 1, 10),\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        # seq_sub_spl_number=200, # None\n        seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor amplrate_gene \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.3%20Bulk%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rates</code> list of float numbers ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.3%20Bulk%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.3%20Bulk%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.12199997901916504s\n======&gt;simulation completes in 0.47299695014953613s\n======&gt;simulation completes in 1.255997657775879s\n======&gt;simulation completes in 3.0000314712524414s\n======&gt;simulation completes in 6.929998874664307s\n======&gt;simulation completes in 15.332034826278687s\n======&gt;simulation completes in 33.06600093841553s\n======&gt;simulation completes in 65.1680314540863s\n======&gt;simulation completes in 120.70003604888916s\n======&gt;simulation completes in 217.62385249137878s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.3%20Bulk%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.4%20Single-cell%20RNA-seq/","title":"4.1.4 Single cell RNA seq","text":"<p><code>tresor.sc.simu_ampl_rate</code> is a Python function in charge of simulating reads with respect to a series of amplication rates at the scRNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.4%20Single-cell%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at amplication efficiencies from 0.1 to 1.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.sc.simu_ampl_rate(\n        # initial sequence generation\n        gmat=gmat,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rates=np.linspace(0.1, 1, 10),\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        # seq_sub_spl_number=200, # None\n        seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor amplrate_sc \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.4%20Single-cell%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rates</code> list of float numbers ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.4%20Single-cell%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.4%20Single-cell%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.02896857261657715s\n======&gt;simulation completes in 0.08196878433227539s\n======&gt;simulation completes in 0.20600128173828125s\n======&gt;simulation completes in 0.4779694080352783s\n======&gt;simulation completes in 1.5829687118530273s\n======&gt;simulation completes in 3.1749932765960693s\n======&gt;simulation completes in 5.8459696769714355s\n======&gt;simulation completes in 10.428000450134277s\n======&gt;simulation completes in 18.868970155715942s\n======&gt;simulation completes in 33.60697078704834s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.1%20Amplification/4.1.4%20Single-cell%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.1%20Overview/","title":"4.2.1 Overview","text":"<p>In one PCR cycle, a gross of DNA is amplified. These steps are repeated for 20-40 cycles, resulting in exponential amplification of the target DNA sequence. Single-cell sequencing involves analyzing the genome or transcriptome of individual cells. This process requires deeper PCR cycles (i.e., more cycles) for several reasons such as limited starting material and poor coverage. This also comes with challenges, such as an increased risk of amplification biases and errors.</p> <p>Sparkling</p> <p>Changing PCR cycles on demand can help us understand how errors in genetic material are amplified and what the error profile looks like. This can further help to optimise relevant sequencing biotech.</p>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.2%20Single-locus/","title":"4.2.2 Single locus","text":"<p><code>tresor.locus.simu_pcr_num</code> is a Python function in charge of simulating reads with respect to a series of PCR cycles in the context of a given genomic locus.</p>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.2%20Single-locus/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files with PCR cycles from 1 to 16.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.locus.simu_pcr_num(\n        # initial sequence generation\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 1,\n                'umi_unit_len': 10,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=perm_i,\n\n        # PCR amplification setting\n        ampl_rate=0.85,\n        err_route='err2d',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-5,\n        pcr_nums=np.arange(1, 16 + 1, 1),\n        err_num_met='nbinomial', # nbinomial\n\n        # sequencing setting\n        seq_error=0.001,\n        # seq_sub_spl_number=200, # None\n        seq_sub_spl_rate=1,  # 0.333\n\n        use_seed=True,\n        seed=1,\n\n        verbose=True,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n    )\n</code></pre> <pre><code>tresor amplrate_sl \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.2%20Single-locus/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> amplification rate <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_nums</code> list of numbers of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.2%20Single-locus/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.2%20Single-locus/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.006001472473144531s\n======&gt;simulation completes in 0.015999555587768555s\n======&gt;simulation completes in 0.031002521514892578s\n======&gt;simulation completes in 0.0520024299621582s\n======&gt;simulation completes in 0.0820016860961914s\n======&gt;simulation completes in 0.13100123405456543s\n======&gt;simulation completes in 0.21903324127197266s\n======&gt;simulation completes in 0.3820035457611084s\n======&gt;simulation completes in 0.6550242900848389s\n======&gt;simulation completes in 1.172032117843628s\n======&gt;simulation completes in 2.121032476425171s\n======&gt;simulation completes in 3.855032205581665s\n======&gt;simulation completes in 7.238165855407715s\n======&gt;simulation completes in 13.530180931091309s\n======&gt;simulation completes in 27.088150024414062s\n======&gt;simulation completes in 50.08818531036377s\n===&gt;Time: 51.309s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.2%20Single-locus/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.3%20Bulk%20RNA-seq/","title":"4.2.3 Bulk RNA seq","text":"<p><code>tresor.gene.simu_pcr_num</code> is a Python function in charge of simulating reads with respect to a series of PCR cycles at the bulk RNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.3%20Bulk%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files with PCR cycles from 1 to 18.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.gene.simu_pcr_num(\n        # initial sequence generation\n        gspl=gspl,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_nums=np.arange(1, 18 + 1, 1),\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        seq_sub_spl_number=200, # None\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor pcrnum_gene \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.3%20Bulk%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_nums</code> list of numbers of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.3%20Bulk%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.3%20Bulk%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.05000138282775879s\n======&gt;simulation completes in 0.12000083923339844s\n======&gt;simulation completes in 0.18500280380249023s\n======&gt;simulation completes in 0.2930026054382324s\n======&gt;simulation completes in 0.43500256538391113s\n======&gt;simulation completes in 0.6080029010772705s\n======&gt;simulation completes in 0.809999942779541s\n======&gt;simulation completes in 1.1830024719238281s\n======&gt;simulation completes in 1.8170020580291748s\n======&gt;simulation completes in 2.9420032501220703s\n======&gt;simulation completes in 4.9160003662109375s\n======&gt;simulation completes in 8.533037900924683s\n======&gt;simulation completes in 15.648032426834106s\n======&gt;simulation completes in 29.202000379562378s\n======&gt;simulation completes in 55.35800218582153s\n======&gt;simulation completes in 106.33699870109558s\n======&gt;simulation completes in 205.703999042511s\n======&gt;simulation completes in 412.96899938583374s\n===&gt;Time: 416.129s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.3%20Bulk%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.4%20Single-cell%20RNA-seq/","title":"4.2.4 Single cell RNA seq","text":"<p><code>tresor.sc.simu_pcr_num</code> is a Python function in charge of simulating reads with respect to a series of PCR cycles at the scRNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.4%20Single-cell%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files with PCR cycles from 1 to 18.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.sc.simu_pcr_num(\n        # initial sequence generation\n        gmat=gmat,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_nums=np.arange(1, 18 + 1, 1),\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        seq_sub_spl_number=200, # None\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor pcrnum_sc \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.4%20Single-cell%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_nums</code> list of numbers of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.4%20Single-cell%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.4%20Single-cell%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.02999734878540039s\n======&gt;simulation completes in 0.0639963150024414s\n======&gt;simulation completes in 0.10599660873413086s\n======&gt;simulation completes in 0.15399861335754395s\n======&gt;simulation completes in 0.21199822425842285s\n======&gt;simulation completes in 0.2799968719482422s\n======&gt;simulation completes in 0.3730289936065674s\n======&gt;simulation completes in 0.489046573638916s\n======&gt;simulation completes in 0.6349985599517822s\n======&gt;simulation completes in 1.0400078296661377s\n======&gt;simulation completes in 1.649998426437378s\n======&gt;simulation completes in 2.403001070022583s\n======&gt;simulation completes in 3.8079991340637207s\n======&gt;simulation completes in 6.248998165130615s\n======&gt;simulation completes in 10.268998861312866s\n======&gt;simulation completes in 18.130997896194458s\n======&gt;simulation completes in 34.058995962142944s\n======&gt;simulation completes in 65.32599782943726s\n===&gt;Time: 68.847s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.2%20PCR%20cycle/4.2.4%20Single-cell%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.1%20Overview/","title":"4.3.1 Overview","text":"<p>PCR (Polymerase Chain Reaction) errors refer to inaccuracies or unintended changes that occur during the DNA amplification process. These errors can arise from multiple sources and significantly affect the accuracy and reliability of the results. </p> <ul> <li> Substitution errors: Incorrect nucleotides are incorporated during the synthesis of the new DNA strand, leading to point mutations.</li> <li>Insertion and deletion (Indel) errors: Extra nucleotides may be inserted, or existing nucleotides may be deleted during DNA synthesis, causing frameshift mutations.</li> <li>Chimeric sequences: Sequences from different template molecules can be incorrectly joined together, creating hybrid sequences that do not exist in the original sample.</li> </ul> <p>Sparkling</p> <p>Identifying and understanding the causes and types of PCR errors is essential for optimizing protocols and achieving high-fidelity amplification.</p>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.2%20Single-locus/","title":"4.3.2 Single locus","text":"<p><code>tresor.locus.simu_pcr_err</code> is a Python function in charge of simulating reads with respect to a series of PCR error rates in the context of a given genomic locus.</p>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.2%20Single-locus/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at PCR error rates of <code>1e-05</code>, <code>2.5e-05</code>, <code>5e-05</code>, <code>7.5e-05</code>, <code>0.0001</code>, <code>0.00025</code>, <code>0.0005</code>, <code>0.00075</code>, <code>0.001</code>, <code>0.0025</code>, <code>0.005</code>, <code>0.0075</code>, <code>0.01</code>, and <code>0.05</code>.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.locus.simu_pcr_err(\n        # initial sequence generation\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 1,\n                'umi_unit_len': 10,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=perm_i,\n\n        # PCR amplification setting\n        ampl_rate=0.85,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_errors=[1e-05, 2.5e-05, 5e-05, 7.5e-05, 0.0001, 0.00025, 0.0005, 0.00075, 0.001, 0.0025, 0.005, 0.0075, 0.01, 0.05],\n        pcr_num=8,\n        err_num_met='nbinomial', # nbinomial\n\n        # sequencing setting\n        seq_error=0.001,\n        # seq_sub_spl_number=200, # None\n        seq_sub_spl_rate=1,  # 0.333\n\n        use_seed=True,\n        seed=1,\n\n        verbose=True,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n    )\n</code></pre> <pre><code>tresor pcrerr_sl \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.2%20Single-locus/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> amplification rate <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_errors</code> list of PCR error rates <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.2%20Single-locus/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.2%20Single-locus/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.3809998035430908s\n======&gt;simulation completes in 0.8220317363739014s\n======&gt;simulation completes in 1.2280306816101074s\n======&gt;simulation completes in 1.630997657775879s\n======&gt;simulation completes in 2.124997854232788s\n======&gt;simulation completes in 2.551999807357788s\n======&gt;simulation completes in 3.0170021057128906s\n======&gt;simulation completes in 3.531029462814331s\n======&gt;simulation completes in 3.9759981632232666s\n======&gt;simulation completes in 4.452999114990234s\n======&gt;simulation completes in 4.910001277923584s\n======&gt;simulation completes in 5.354998350143433s\n======&gt;simulation completes in 5.812998056411743s\n======&gt;simulation completes in 6.254023551940918s\n===&gt;Time: 6.417s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.2%20Single-locus/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.3%20Bulk%20RNA-seq/","title":"4.3.3 Bulk RNA seq","text":"<p><code>tresor.gene.simu_pcr_err</code> is a Python function in charge of simulating reads with respect to a series of PCR errors at the bulk RNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.3%20Bulk%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at PCR errors of <code>1e-05</code>, <code>2.5e-05</code>, <code>5e-05</code>, <code>7.5e-05</code>, <code>0.0001</code>, <code>0.00025</code>, <code>0.0005</code>, <code>0.00075</code>, <code>0.001</code>, <code>0.0025</code>, <code>0.005</code>, <code>0.0075</code>, and <code>0.01</code>.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.gene.simu_pcr_err(\n        # initial sequence generation\n        gspl=gspl,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_errors=[1e-05, 2.5e-05, 5e-05, 7.5e-05, 0.0001, 0.00025, 0.0005, 0.00075, 0.001, 0.0025, 0.005, 0.0075, 0.01],\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        seq_sub_spl_number=200, # None\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor pcrerr_gene \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.3%20Bulk%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_errors</code> list of PCR error rates <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.3%20Bulk%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.3%20Bulk%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.9619994163513184s\n======&gt;simulation completes in 1.9589989185333252s\n======&gt;simulation completes in 3.1650047302246094s\n======&gt;simulation completes in 4.178999185562134s\n======&gt;simulation completes in 5.328997373580933s\n======&gt;simulation completes in 6.2790000438690186s\n======&gt;simulation completes in 7.273030757904053s\n======&gt;simulation completes in 8.25999927520752s\n======&gt;simulation completes in 9.23403024673462s\n======&gt;simulation completes in 10.194000005722046s\n======&gt;simulation completes in 11.173245668411255s\n======&gt;simulation completes in 12.205214738845825s\n======&gt;simulation completes in 13.174387216567993s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.3%20Bulk%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.4%20Single-cell%20RNA-seq/","title":"4.3.4 Single cell RNA seq","text":"<p><code>tresor.sc.simu_pcr_err</code> is a Python function in charge of simulating reads with respect to a series of PCR errors at the scRNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.4%20Single-cell%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at PCR errors of <code>1e-05</code>, <code>2.5e-05</code>, <code>5e-05</code>, <code>7.5e-05</code>, <code>0.0001</code>, <code>0.00025</code>, <code>0.0005</code>, <code>0.00075</code>, <code>0.001</code>, <code>0.0025</code>, <code>0.005</code>, <code>0.0075</code>, and <code>0.01</code>.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.sc.simu_pcr_err(\n        # initial sequence generation\n        gspl=gspl,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_errors=[1e-05, 2.5e-05, 5e-05, 7.5e-05, 0.0001, 0.00025, 0.0005, 0.00075, 0.001, 0.0025, 0.005, 0.0075, 0.01],\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        seq_sub_spl_number=200, # None\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor pcrerr_sc \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.4%20Single-cell%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_errors</code> list of PCR error rates <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.4%20Single-cell%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.4%20Single-cell%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.2149946689605713s\n======&gt;simulation completes in 0.4669990539550781s\n======&gt;simulation completes in 0.89797043800354s\n======&gt;simulation completes in 1.3259694576263428s\n======&gt;simulation completes in 1.723968267440796s\n======&gt;simulation completes in 2.0199718475341797s\n======&gt;simulation completes in 2.29896879196167s\n======&gt;simulation completes in 2.5799684524536133s\n======&gt;simulation completes in 2.831967353820801s\n======&gt;simulation completes in 3.084970474243164s\n======&gt;simulation completes in 3.3979694843292236s\n======&gt;simulation completes in 3.6739683151245117s\n======&gt;simulation completes in 3.9459686279296875s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.3%20PCR%20error/4.3.4%20Single-cell%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.1%20Overview/","title":"4.4.1 Overview","text":"<p>Sequencing errors refer to inaccuracies or incorrect base calls that occur during the process of determining the nucleotide sequence of a DNA or RNA molecule. These errors can arise from various sources and can impact the accuracy, reliability, and interpretation of sequencing data. </p> <p>Sparkling</p> <p>Understanding the types and causes of sequencing errors is crucial for improving sequencing technologies and data analysis methods.</p>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.2%20Single-locus/","title":"4.4.2 Single locus","text":"<p><code>tresor.locus.simu_seq_err</code> is a Python function in charge of simulating reads with respect to a series of sequencing error rates in the context of a given genomic locus.</p>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.2%20Single-locus/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at sequencing error rates of <code>1e-05</code>, <code>2.5e-05</code>, <code>5e-05</code>, <code>7.5e-05</code>, <code>0.0001</code>, <code>0.00025</code>, <code>0.0005</code>, <code>0.00075</code>, <code>0.001</code>, <code>0.0025</code>, <code>0.005</code>, <code>0.0075</code>, <code>0.01</code>, <code>0.025</code>, <code>0.05</code>, <code>0.075</code>, <code>0.1</code>, <code>0.2</code>, and <code>0.3</code>.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.locus.simu_seq_err(\n        # initial sequence generation\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 1,\n                'umi_unit_len': 10,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=perm_i,\n\n        # PCR amplification setting\n        ampl_rate=0.85,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-05,\n        pcr_num=8,\n        err_num_met='nbinomial', # nbinomial\n\n        # sequencing setting\n        seq_errors=[1e-05, 2.5e-05, 5e-05, 7.5e-05, 0.0001, 0.00025, 0.0005, 0.00075, 0.001, 0.0025, 0.005, 0.0075, 0.01, 0.025, 0.05, 0.075, 0.1, 0.2, 0.3],\n        # seq_sub_spl_number=200, # None\n        seq_sub_spl_rate=1,  # 0.333\n\n        use_seed=True,\n        seed=1,\n\n        verbose=True,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n    )\n</code></pre> <pre><code>tresor seqerr_sl \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.2%20Single-locus/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> amplification rate <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_errors</code> list of sequencing error rates <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.2%20Single-locus/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.2%20Single-locus/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.4640328884124756s\n======&gt;simulation completes in 0.750999927520752s\n======&gt;simulation completes in 1.0420026779174805s\n======&gt;simulation completes in 1.3240013122558594s\n======&gt;simulation completes in 1.6250004768371582s\n======&gt;simulation completes in 1.928037166595459s\n======&gt;simulation completes in 2.22403883934021s\n======&gt;simulation completes in 2.547032117843628s\n======&gt;simulation completes in 2.8380000591278076s\n======&gt;simulation completes in 3.1560401916503906s\n======&gt;simulation completes in 3.5390000343322754s\n======&gt;simulation completes in 3.9640021324157715s\n======&gt;simulation completes in 4.425003290176392s\n======&gt;simulation completes in 5.131028890609741s\n======&gt;simulation completes in 6.167038917541504s\n======&gt;simulation completes in 7.612001895904541s\n======&gt;simulation completes in 9.494002103805542s\n======&gt;simulation completes in 12.569305419921875s\n======&gt;simulation completes in 16.960304021835327s\n===&gt;Time: 24.260s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.2%20Single-locus/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.3%20Bulk%20RNA-seq/","title":"4.4.3 Bulk RNA seq","text":"<p><code>tresor.gene.simu_seq_err</code> is a Python function in charge of simulating reads with respect to a series of sequencing errors at the bulk RNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.3%20Bulk%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at sequencing errors of <code>1e-05</code>, <code>2.5e-05</code>, <code>5e-05</code>, <code>7.5e-05</code>, <code>0.0001</code>, <code>0.00025</code>, <code>0.0005</code>, <code>0.00075</code>, <code>0.001</code>, <code>0.0025</code>, <code>0.005</code>, <code>0.0075</code>, <code>0.01</code>, <code>0.025</code>, <code>0.05</code>, <code>0.075</code>, <code>0.1</code>, <code>0.2</code>, and <code>0.3</code>.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.gene.simu_seq_err(\n        # initial sequence generation\n        gspl=gspl,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_errors=[1e-05, 2.5e-05, 5e-05, 7.5e-05, 0.0001, 0.00025, 0.0005, 0.00075, 0.001, 0.0025, 0.005, 0.0075, 0.01, 0.025, 0.05, 0.075, 0.1, 0.2, 0.3],\n        seq_sub_spl_number=200, # None\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor seqerr_gene \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.3%20Bulk%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_errors</code> list of sequencing error rates <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.3%20Bulk%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.3%20Bulk%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.8229985237121582s\n======&gt;simulation completes in 0.8449995517730713s\n======&gt;simulation completes in 0.8629984855651855s\n======&gt;simulation completes in 0.8809988498687744s\n======&gt;simulation completes in 0.8999991416931152s\n======&gt;simulation completes in 0.9179985523223877s\n======&gt;simulation completes in 0.9379985332489014s\n======&gt;simulation completes in 0.9569995403289795s\n======&gt;simulation completes in 0.9749984741210938s\n======&gt;simulation completes in 0.9939994812011719s\n======&gt;simulation completes in 1.0129997730255127s\n======&gt;simulation completes in 1.03200364112854s\n======&gt;simulation completes in 1.0550062656402588s\n======&gt;simulation completes in 1.080005407333374s\n======&gt;simulation completes in 1.108999490737915s\n======&gt;simulation completes in 1.139998197555542s\n======&gt;simulation completes in 1.178999423980713s\n======&gt;simulation completes in 1.2230000495910645s\n======&gt;simulation completes in 1.2789998054504395s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.3%20Bulk%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.4%20Single-cell%20RNA-seq/","title":"4.4.4 Single cell RNA seq","text":"<p><code>tresor.sc.simu_seq_err</code> is a Python function in charge of simulating reads with respect to a series of sequencing errors at the scRNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.4%20Single-cell%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at sequencing errors of <code>1e-05</code>, <code>2.5e-05</code>, <code>5e-05</code>, <code>7.5e-05</code>, <code>0.0001</code>, <code>0.00025</code>, <code>0.0005</code>, <code>0.00075</code>, <code>0.001</code>, <code>0.0025</code>, <code>0.005</code>, <code>0.0075</code>, <code>0.01</code>, <code>0.025</code>, <code>0.05</code>, <code>0.075</code>, <code>0.1</code>, <code>0.2</code>, and <code>0.3</code>.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.sc.simu_seq_err(\n        # initial sequence generation\n        gspl=gspl,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['barcode', 'umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_errors=[1e-05, 2.5e-05, 5e-05, 7.5e-05, 0.0001, 0.00025, 0.0005, 0.00075, 0.001, 0.0025, 0.005, 0.0075, 0.01, 0.025, 0.05, 0.075, 0.1, 0.2, 0.3],\n        seq_sub_spl_number=200, # None\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor seqerr_sc \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.4%20Single-cell%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_errors</code> list of sequencing error rates <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.4%20Single-cell%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.4%20Single-cell%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.2249603271484375s\n======&gt;simulation completes in 0.2529621124267578s\n======&gt;simulation completes in 0.27799153327941895s\n======&gt;simulation completes in 0.30399394035339355s\n======&gt;simulation completes in 0.33098506927490234s\n======&gt;simulation completes in 0.35599184036254883s\n======&gt;simulation completes in 0.38298583030700684s\n======&gt;simulation completes in 0.40896105766296387s\n======&gt;simulation completes in 0.4359622001647949s\n======&gt;simulation completes in 0.46796298027038574s\n======&gt;simulation completes in 0.501960277557373s\n======&gt;simulation completes in 0.5379629135131836s\n======&gt;simulation completes in 0.5689854621887207s\n======&gt;simulation completes in 0.6139862537384033s\n======&gt;simulation completes in 0.6669600009918213s\n======&gt;simulation completes in 0.7449617385864258s\n======&gt;simulation completes in 0.8219916820526123s\n======&gt;simulation completes in 0.9509828090667725s\n======&gt;simulation completes in 1.1259870529174805s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.4%20Sequencing%20error/4.4.4%20Single-cell%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.1%20Overview/","title":"4.5.1 Overview","text":"<p>Unique Molecular Identifiers (UMIs) are short, random sequences of nucleotides attached to DNA or RNA molecules before PCR amplification. UMIs allow each original molecule to be distinguished from others. </p> <p>Sparkling</p> <p>UMIs play a critical role in reducing amplification biases and errors, thereby improving the accuracy and reliability of sequencing data.</p>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.2%20Single-locus/","title":"4.5.2 Single locus","text":"<p><code>tresor.locus.simu_umi_len</code> is a Python function in charge of simulating reads with respect to a series of UMI lengths in the context of a given genomic locus.</p>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.2%20Single-locus/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at UMI lengths from 6 to 18.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.locus.simu_umi_len(\n        # initial sequence generation\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 1,\n                'umi_unit_lens': np.arange(6, 18 + 1, 1),\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=perm_i,\n\n        # PCR amplification setting\n        ampl_rate=0.85,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-05,\n        pcr_num=8,\n        err_num_met='nbinomial', # nbinomial\n\n        # sequencing setting\n        seq_error=0.001,\n        # seq_sub_spl_number=None, # None\n        seq_sub_spl_rate=1,  # 0.333\n\n        use_seed=True,\n        seed=1,\n\n        verbose=True,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n    )\n</code></pre> <pre><code>tresor umilen_sl \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.2%20Single-locus/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> amplification rate <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rates <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.2%20Single-locus/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.2%20Single-locus/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 7.267095565795898s\n======&gt;simulation completes in 7.31403374671936s\n======&gt;simulation completes in 7.501000165939331s\n======&gt;simulation completes in 7.413031101226807s\n======&gt;simulation completes in 7.5430309772491455s\n======&gt;simulation completes in 7.491699695587158s\n======&gt;simulation completes in 7.379999160766602s\n======&gt;simulation completes in 7.356315612792969s\n======&gt;simulation completes in 7.301987886428833s\n======&gt;simulation completes in 7.337123155593872s\n======&gt;simulation completes in 8.41504430770874s\n======&gt;simulation completes in 7.394457578659058s\n======&gt;simulation completes in 7.331037759780884s\n===&gt;Time: 98.249s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.2%20Single-locus/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files <p>It is worth mentioning the libraries of UMIs with different lengths rendered in the following form.</p> Fig 2. Sequencing libraries"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.3%20Bulk%20RNA-seq/","title":"4.5.3 Bulk RNA seq","text":"<p><code>tresor.gene.simu_umi_len</code> is a Python function in charge of simulating reads with respect to a series of UMI lengths at the bulk RNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.3%20Bulk%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files with UMIs of lengths from 7 to 36.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.gene.simu_umi_len(\n        # initial sequence generation\n        gspl=gspl,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_lens': np.arange(7, 36 + 1, 1),\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        seq_sub_spl_number=200, # None\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor umilen_gene \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.3%20Bulk%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read. Lengths of UMIs vary in a range <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.3%20Bulk%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.3%20Bulk%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 2.8730275630950928s\n======&gt;simulation completes in 2.9519758224487305s\n======&gt;simulation completes in 2.930018663406372s\n======&gt;simulation completes in 3.0289931297302246s\n======&gt;simulation completes in 3.19893479347229s\n======&gt;simulation completes in 3.496039390563965s\n======&gt;simulation completes in 3.4660286903381348s\n======&gt;simulation completes in 3.4059395790100098s\n======&gt;simulation completes in 3.371000051498413s\n======&gt;simulation completes in 3.4959704875946045s\n======&gt;simulation completes in 3.7300221920013428s\n======&gt;simulation completes in 3.6379969120025635s\n======&gt;simulation completes in 3.91005277633667s\n======&gt;simulation completes in 4.011698961257935s\n======&gt;simulation completes in 4.11646032333374s\n======&gt;simulation completes in 4.311992883682251s\n======&gt;simulation completes in 4.139020919799805s\n======&gt;simulation completes in 4.244063138961792s\n======&gt;simulation completes in 4.463680982589722s\n======&gt;simulation completes in 4.64800238609314s\n======&gt;simulation completes in 4.433006048202515s\n======&gt;simulation completes in 5.417316675186157s\n======&gt;simulation completes in 4.551185369491577s\n======&gt;simulation completes in 4.674246311187744s\n======&gt;simulation completes in 5.081998348236084s\n======&gt;simulation completes in 4.961503744125366s\n======&gt;simulation completes in 5.0400168895721436s\n======&gt;simulation completes in 5.126001596450806s\n======&gt;simulation completes in 4.928617477416992s\n======&gt;simulation completes in 5.1075379848480225s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.3%20Bulk%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files <p>It is worth mentioning the libraries of UMIs with different lengths rendered in the following form.</p> Fig 2. Sequencing libraries"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.4%20Single-cell%20RNA-seq/","title":"4.5.4 Single cell RNA seq","text":"<p><code>tresor.sc.simu_umi_len</code> is a Python function in charge of simulating reads with respect to a series of UMI lengths at the scRNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.4%20Single-cell%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files with UMIs of lengths from 7 to 18.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.sc.simu_umi_len(\n        # initial sequence generation\n        gspl=gspl,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_lens': np.arange(7, 18 + 1, 1),\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        seq_sub_spl_number=200, # None\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor umilen_gene \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.4%20Single-cell%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read. Lengths of UMIs vary in a range <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.4%20Single-cell%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.4%20Single-cell%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 3.3939666748046875s\n======&gt;simulation completes in 3.456042766571045s\n======&gt;simulation completes in 3.605976104736328s\n======&gt;simulation completes in 3.689030885696411s\n======&gt;simulation completes in 4.053001642227173s\n======&gt;simulation completes in 3.836833953857422s\n======&gt;simulation completes in 3.826223134994507s\n======&gt;simulation completes in 3.7459917068481445s\n======&gt;simulation completes in 3.924407720565796s\n======&gt;simulation completes in 3.6454570293426514s\n======&gt;simulation completes in 3.9599993228912354s\n======&gt;simulation completes in 3.747000217437744s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.5%20UMI%20length/4.5.4%20Single-cell%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files <p>It is worth mentioning the libraries of UMIs with different lengths rendered in the following form.</p> Fig 2. Sequencing libraries"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.1%20Overview/","title":"4.6.1 Overview","text":"<p>Sequencing depth, also equivalent to coverage, denotes the frequency at which a specific nucleotide in the genome is read during a sequencing experiment. </p> <p>Sparkling</p> <p>It is a crucial measurement as it influences the accuracy, reliability, and resolution of the data. High sequencing depth enhances the robustness and reproducibility of sequencing results, whereas low sequencing depth can result in missed or erroneous interpretations.</p>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.2%20Single-locus/","title":"4.6.2 Single locus","text":"<p><code>tresor.locus.simu_seq_dep</code> is a Python function in charge of simulating reads with respect to a series of sequencing depths in the context of a given genomic locus.</p>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.2%20Single-locus/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files at sequencing depths of <code>100</code>, <code>200</code>, <code>500</code>, <code>600</code>, <code>800</code>, <code>1000</code>, <code>2000</code>, <code>3000</code>, and <code>5000</code>.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.locus.simu_seq_dep(\n        # initial sequence generation\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 1,\n                'umi_unit_len': 10,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=perm_i,\n\n        # PCR amplification setting\n        ampl_rate=0.85,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-05,\n        pcr_num=8,\n        err_num_met='nbinomial', # nbinomial\n\n        # sequencing setting\n        seq_error=0.001,\n        seq_sub_spl_numbers=[100, 200, 500, 600, 800, 1000, 2000, 3000, 5000], # None\n        # seq_sub_spl_rate=None,  # 0.333\n\n        use_seed=True,\n        seed=1,\n\n        verbose=True,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n    )\n</code></pre> <pre><code>tresor seqdep_sl \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.2%20Single-locus/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> amplification rate <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rates <code>seq_sub_spl_numbers</code> list of numbers of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.2%20Single-locus/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.2%20Single-locus/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.6489989757537842s\n======&gt;simulation completes in 1.4089992046356201s\n======&gt;simulation completes in 2.158998727798462s\n======&gt;simulation completes in 2.9019975662231445s\n======&gt;simulation completes in 3.5669970512390137s\n======&gt;simulation completes in 4.19699764251709s\n======&gt;simulation completes in 4.875028371810913s\n======&gt;simulation completes in 5.584000110626221s\n======&gt;simulation completes in 6.301028490066528s\n===&gt;Time: 6.457s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.2%20Single-locus/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig 1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.3%20Bulk%20RNA-seq/","title":"4.6.3 Bulk RNA seq","text":"<p><code>tresor.gene.simu_seq_dep</code> is a Python function in charge of simulating reads with respect to a series of sequencing depths at the bulk RNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.3%20Bulk%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files with sequencing depths of 100, 500, 1000, and 10000.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.gene.simu_seq_dep(\n        # initial sequence generation\n        gspl=gspl,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        seq_sub_spl_numbers=[100, 500, 1000, 10000],\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor seqdep_gene \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.3%20Bulk%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read. Lengths of UMIs vary in a range <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_numbers</code> list of numbers of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.3%20Bulk%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.3%20Bulk%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.9580302238464355s\n======&gt;simulation completes in 2.118002414703369s\n======&gt;simulation completes in 3.5160024166107178s\n======&gt;simulation completes in 8.621001720428467s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.3%20Bulk%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.4%20Single-cell%20RNA-seq/","title":"4.6.4 Single cell RNA seq","text":"<p><code>tresor.sc.simu_seq_dep</code> is a Python function in charge of simulating reads with respect to a series of sequencing depths at the scRNA-seq level.</p>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.4%20Single-cell%20RNA-seq/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files with sequencing depths of 100, 500, 1000, and 10000.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.sc.simu_seq_dep(\n        # initial sequence generation\n        gmat=gmat,\n\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 3,\n                'umi_unit_len': 12,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/'),\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=0,\n\n        # PCR amplification\n        ampl_rate=0.9,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-4,\n        pcr_num=10,\n        err_num_met='nbinomial',\n\n        # PCR amplification\n        seq_error=0.01,\n        seq_sub_spl_numbers=[100, 500, 1000, 10000],\n        # seq_sub_spl_rate=0.333,\n\n        use_seed=True,\n        seed=1,\n\n        verbose=False,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/'),\n    )\n</code></pre> <pre><code>tresor seqdep_sc \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.4%20Single-cell%20RNA-seq/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read. Lengths of UMIs vary in a range <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> float number ranging from 0 to 1 <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_numbers</code> list of numbers of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.4%20Single-cell%20RNA-seq/#output","title":"Output","text":""},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.4%20Single-cell%20RNA-seq/#console","title":"Console","text":"<pre><code>======&gt;simulation completes in 0.14699864387512207s\n======&gt;simulation completes in 0.36499834060668945s\n======&gt;simulation completes in 0.6529967784881592s\n======&gt;simulation completes in 1.787999153137207s\nFinished!\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.6%20Sequencing%20depth/4.6.4%20Single-cell%20RNA-seq/#understanding_files","title":"Understanding files","text":"<p>The resultant files of the simulated reads are shown as follows.</p> Fig1. Generated FastQ files"},{"location":"tutorial/4.read-simulation/4.7%20Customised/4.7.1%20Overview/","title":"4.7.1 Overview","text":"<p>Tresor allows users to vary many parameters, such as UMI lengths, in a certain range in one stop. However, we might want to gain a general API to simulate reads at our wish. Here, the <code>tresor.locus.simu_generic</code> module can meet your requirement in this aspect. </p>"},{"location":"tutorial/4.read-simulation/4.7%20Customised/4.7.2%20Single-locus/","title":"4.7.2 Single locus","text":"<p><code>tresor.locus.simu_generic</code> is a Python function in charge of simulating reads in general conditions in the context of a given genomic locus.</p>"},{"location":"tutorial/4.read-simulation/4.7%20Customised/4.7.2%20Single-locus/#usage","title":"Usage","text":"<p>We take the following command as an example to generate FastQ files without a certain condition.</p> PythonShell <pre><code>import tresor as ts\n\nfor perm_i in range(1):\n    print(perm_i)\n    ts.locus.simu_generic(\n        # initial sequence generation\n        len_params={\n            'umi': {\n                'umi_unit_pattern': 1,\n                'umi_unit_len': 10,\n            },\n            'seq': 100,\n        },\n        material_params={\n            'fasta_cdna_fpn': to('data/Homo_sapiens.GRCh38.cdna.all.fa.gz'),  # None False\n        },\n        seq_num=50,\n        working_dir=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n\n        condis=['umi', 'seq'],\n        sim_thres=3,\n        permutation=perm_i,\n\n        # PCR amplification setting\n        ampl_rate=0.85,\n        err_route='sptree',  # bftree sptree err1d err2d mutation_table_minimum mutation_table_complete\n        pcr_error=1e-05,\n        pcr_num=8,\n        err_num_met='nbinomial', # nbinomial\n\n        # sequencing setting\n        seq_error=0.001,\n        # seq_sub_spl_number=200, # None\n        seq_sub_spl_rate=1,  # 0.333\n\n        use_seed=True,\n        seed=1,\n\n        verbose=True,  # True False\n        mode='short_read',  # long_read short_read\n\n        sv_fastq_fp=to('data/simu/docs/') + 'permute_' + str(perm_i) + '/',\n    )\n</code></pre> <pre><code>tresor generic_sl \\\n-cfpn ./tresor/data/amplrate_sl.yml \\\n-snum 50 \\\n-permut 0 \\\n-sthres 3 \\\n-wd ./tresor/data/simu/ \\\n-md short_read \\\n-is True \\\n-vb True\n</code></pre>"},{"location":"tutorial/4.read-simulation/4.7%20Customised/4.7.2%20Single-locus/#attributes","title":"Attributes","text":"<p>Illustration</p> PythonShell Attribute Description <code>seq_num</code> number of RNA molecules. <code>50</code> by default <code>len_params</code> lengths of different components of a read <code>seq_params</code> sequences of different components of a read, It allows users to add their customised sequences <code>material_params</code> a Python dictionary. Showing if cDNA libraries are provided, please use key word <code>fasta_cdna_fpn</code>. The human cDNA library can be downloaded through the Ensembl genome database <code>ampl_rate</code> amplification rate <code>err_route</code> the computational algorithm to generate errors. There are 6 methods, including <code>bftree</code>, <code>sptree</code>, <code>err1d</code>, <code>err2d</code>, <code>mutation_table_minimum</code>, and <code>mutation_table_complete</code>. <code>pcr_error</code> PCR error rate <code>pcr_num</code> number of PCR cycles to amplify reads <code>err_num_met</code> the method to generate errors, that is, <code>binomial</code> or <code>nbinomial</code> <code>seq_error</code> sequencing error rate <code>seq_sub_spl_number</code> number of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_rate</code> is specified to <code>None</code> <code>seq_sub_spl_rate</code> rate of subsampling PCR amplified reads. It exists when <code>seq_sub_spl_number</code> is specified to <code>None</code> <code>sv_fastq_fp</code> folder to save FastQ files <code>is_seed</code> if seeds are used to simulate sequencing libraries. This is designed to make in silico experiments reproducible <code>working_dir</code> working directory where all simulation results are about to be saved <code>condis</code> names of components that a read contains. It can contains an unlimited number of read components <code>sim_thres</code> similarity threshold. <code>3</code> by default <code>permutation</code> permutation times <code>mode</code> <code>long_read</code> or <code>short_read</code> <code>verbose</code> whether to print intermediate results Attribute Description <code>cfpn</code> location to the yaml configuration file. Users can specify the atrributes illustrated on the Python tab in the <code>.yml</code> file. <code>snum</code> number of sequencing molecules <code>permut</code> permutation times <code>sthres</code> similarity threshold. <code>3</code> by default <code>wd</code> working directory where all simulation results are about to be saved <code>md</code> <code>long_read</code> or <code>short_read</code> mode <code>is</code> if seeds are used to simulate sequencing libraries. This is designed for reproducible in silico experiments <code>vb</code> whether to print intermediate results"},{"location":"tutorial/appendix/Sequencing_technology/","title":"Sequencing technology","text":"<p>Tresor can simulate both short reads and long reads at single-locus, gene, and single-cell levels. This can be easily done when you use Tresor's command by putting</p> <pre><code>mode='short_read'\n# or\nmode='long_read'\n</code></pre>"},{"location":"tutorial/appendix/error-type/","title":"Error type","text":"<p>Errors can be introduced to sequenced molecules in multiple stages during sequencing experiments. Typically, the primary stages where errors typically occur include PCR amplification, sequencing, and bead synthesis. Inaccuracies are</p> <ul> <li> <p>Substitution errors:</p> <ul> <li>Incorrectly identifying one nucleotide as another. </li> <li>Mistakes made by DNA polymerase during amplification (PCR). </li> <li>Base calling failure (sequencing)</li> </ul> </li> <li> <p>Insertion errors: Adding extra nucleotides that are not present in the original sequence. </p> </li> <li>Deletion errors: Deleting nucleotides that are present in the original sequence.</li> </ul> <p>To simulate reads as more genuinely as possible, Tresor contains a function to allow any types of errors to bo added during PCR amplification, sequencing, and bead synthesis. Users can pass certain values on to the following attributes. Then, Tresor will dispose of the error-adding process.</p> <ol> <li> <p>Bead synthesis <pre><code># substitution error\nbead_mutation=True, # True False\nbead_mut_rate=1e-4, # 0.016 0.00004\n# deletion\nbead_deletion=True, # True False\nbead_del_rate=0.1,  # 0.016 0.00004, 2.4e-7\n# insertion\nbead_insertion=True, # True False\nbead_ins_rate=7.1e-7,  # 0.011 0.00001, 7.1e-7\n</code></pre></p> </li> <li> <p>PCR <pre><code># substitution error\npcr_err=0.00001\n# deletion\npcr_deletion=True, # False True\npcr_del_rate=2.4 * 10e-6,\n# insertion\npcr_insertion=True, # False True\npcr_ins_rate=7.1 * 10e-7,\n</code></pre></p> </li> <li> <p>Sequencing <pre><code># substitution error\nseq_err=0.001,\n# deletion\nseq_deletion=True, # False True\nseq_del_rate=2.4 * 10e-6,\n# insertion\nseq_insertion=True, # False True\nseq_ins_rate=7.1 * 10e-7,\n</code></pre></p> </li> </ol>"}]}